{"version":3,"file":"pixi-sound.cjs.js","sources":["../src/instance.ts","../node_modules/tslib/tslib.es6.js","../src/utils/supported.ts","../src/utils/resolveUrl.ts","../src/SoundLoader.ts","../src/htmlaudio/HTMLAudioInstance.ts","../src/htmlaudio/HTMLAudioMedia.ts","../src/SoundSprite.ts","../src/webaudio/WebAudioUtils.ts","../src/webaudio/WebAudioInstance.ts","../src/Filterable.ts","../src/webaudio/WebAudioNodes.ts","../src/webaudio/WebAudioMedia.ts","../src/Sound.ts","../src/htmlaudio/HTMLAudioContext.ts","../src/webaudio/WebAudioContext.ts","../src/SoundLibrary.ts","../src/htmlaudio/index.ts","../src/filters/Filter.ts","../src/filters/EqualizerFilter.ts","../src/filters/DistortionFilter.ts","../src/filters/StereoFilter.ts","../src/filters/ReverbFilter.ts","../src/filters/MonoFilter.ts","../src/filters/StreamFilter.ts","../src/filters/TelephoneFilter.ts","../src/filters/index.ts","../src/webaudio/index.ts","../src/utils/playOnce.ts","../src/utils/render.ts","../src/utils/sineTone.ts","../src/utils/index.ts","../src/index.ts"],"sourcesContent":["import { SoundLibrary } from './SoundLibrary';\n\n/**\n * Singleton instance of the SoundLibrary\n */\nlet instance: SoundLibrary;\n\n/**\n * Internal set function for the singleton instance.\n * @ignore\n * @param sound - - Sound library instance\n */\nfunction setInstance(sound: SoundLibrary): SoundLibrary\n{\n    instance = sound;\n\n    return sound;\n}\n\n/**\n * Internal get function for the singleton instance.\n * @ignore\n */\nfunction getInstance(): SoundLibrary\n{\n    return instance;\n}\n\nexport { instance, setInstance, getInstance };\n","/*! *****************************************************************************\r\nCopyright (c) Microsoft Corporation.\r\n\r\nPermission to use, copy, modify, and/or distribute this software for any\r\npurpose with or without fee is hereby granted.\r\n\r\nTHE SOFTWARE IS PROVIDED \"AS IS\" AND THE AUTHOR DISCLAIMS ALL WARRANTIES WITH\r\nREGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF MERCHANTABILITY\r\nAND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY SPECIAL, DIRECT,\r\nINDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES WHATSOEVER RESULTING FROM\r\nLOSS OF USE, DATA OR PROFITS, WHETHER IN AN ACTION OF CONTRACT, NEGLIGENCE OR\r\nOTHER TORTIOUS ACTION, ARISING OUT OF OR IN CONNECTION WITH THE USE OR\r\nPERFORMANCE OF THIS SOFTWARE.\r\n***************************************************************************** */\r\n/* global Reflect, Promise */\r\n\r\nvar extendStatics = function(d, b) {\r\n    extendStatics = Object.setPrototypeOf ||\r\n        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\r\n        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };\r\n    return extendStatics(d, b);\r\n};\r\n\r\nexport function __extends(d, b) {\r\n    extendStatics(d, b);\r\n    function __() { this.constructor = d; }\r\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\r\n}\r\n\r\nexport var __assign = function() {\r\n    __assign = Object.assign || function __assign(t) {\r\n        for (var s, i = 1, n = arguments.length; i < n; i++) {\r\n            s = arguments[i];\r\n            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];\r\n        }\r\n        return t;\r\n    }\r\n    return __assign.apply(this, arguments);\r\n}\r\n\r\nexport function __rest(s, e) {\r\n    var t = {};\r\n    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)\r\n        t[p] = s[p];\r\n    if (s != null && typeof Object.getOwnPropertySymbols === \"function\")\r\n        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {\r\n            if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))\r\n                t[p[i]] = s[p[i]];\r\n        }\r\n    return t;\r\n}\r\n\r\nexport function __decorate(decorators, target, key, desc) {\r\n    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;\r\n    if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);\r\n    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\r\n    return c > 3 && r && Object.defineProperty(target, key, r), r;\r\n}\r\n\r\nexport function __param(paramIndex, decorator) {\r\n    return function (target, key) { decorator(target, key, paramIndex); }\r\n}\r\n\r\nexport function __metadata(metadataKey, metadataValue) {\r\n    if (typeof Reflect === \"object\" && typeof Reflect.metadata === \"function\") return Reflect.metadata(metadataKey, metadataValue);\r\n}\r\n\r\nexport function __awaiter(thisArg, _arguments, P, generator) {\r\n    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }\r\n    return new (P || (P = Promise))(function (resolve, reject) {\r\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\r\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\r\n        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }\r\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\r\n    });\r\n}\r\n\r\nexport function __generator(thisArg, body) {\r\n    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;\r\n    return g = { next: verb(0), \"throw\": verb(1), \"return\": verb(2) }, typeof Symbol === \"function\" && (g[Symbol.iterator] = function() { return this; }), g;\r\n    function verb(n) { return function (v) { return step([n, v]); }; }\r\n    function step(op) {\r\n        if (f) throw new TypeError(\"Generator is already executing.\");\r\n        while (_) try {\r\n            if (f = 1, y && (t = op[0] & 2 ? y[\"return\"] : op[0] ? y[\"throw\"] || ((t = y[\"return\"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;\r\n            if (y = 0, t) op = [op[0] & 2, t.value];\r\n            switch (op[0]) {\r\n                case 0: case 1: t = op; break;\r\n                case 4: _.label++; return { value: op[1], done: false };\r\n                case 5: _.label++; y = op[1]; op = [0]; continue;\r\n                case 7: op = _.ops.pop(); _.trys.pop(); continue;\r\n                default:\r\n                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }\r\n                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }\r\n                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }\r\n                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }\r\n                    if (t[2]) _.ops.pop();\r\n                    _.trys.pop(); continue;\r\n            }\r\n            op = body.call(thisArg, _);\r\n        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }\r\n        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };\r\n    }\r\n}\r\n\r\nexport function __createBinding(o, m, k, k2) {\r\n    if (k2 === undefined) k2 = k;\r\n    o[k2] = m[k];\r\n}\r\n\r\nexport function __exportStar(m, exports) {\r\n    for (var p in m) if (p !== \"default\" && !exports.hasOwnProperty(p)) exports[p] = m[p];\r\n}\r\n\r\nexport function __values(o) {\r\n    var s = typeof Symbol === \"function\" && Symbol.iterator, m = s && o[s], i = 0;\r\n    if (m) return m.call(o);\r\n    if (o && typeof o.length === \"number\") return {\r\n        next: function () {\r\n            if (o && i >= o.length) o = void 0;\r\n            return { value: o && o[i++], done: !o };\r\n        }\r\n    };\r\n    throw new TypeError(s ? \"Object is not iterable.\" : \"Symbol.iterator is not defined.\");\r\n}\r\n\r\nexport function __read(o, n) {\r\n    var m = typeof Symbol === \"function\" && o[Symbol.iterator];\r\n    if (!m) return o;\r\n    var i = m.call(o), r, ar = [], e;\r\n    try {\r\n        while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);\r\n    }\r\n    catch (error) { e = { error: error }; }\r\n    finally {\r\n        try {\r\n            if (r && !r.done && (m = i[\"return\"])) m.call(i);\r\n        }\r\n        finally { if (e) throw e.error; }\r\n    }\r\n    return ar;\r\n}\r\n\r\nexport function __spread() {\r\n    for (var ar = [], i = 0; i < arguments.length; i++)\r\n        ar = ar.concat(__read(arguments[i]));\r\n    return ar;\r\n}\r\n\r\nexport function __spreadArrays() {\r\n    for (var s = 0, i = 0, il = arguments.length; i < il; i++) s += arguments[i].length;\r\n    for (var r = Array(s), k = 0, i = 0; i < il; i++)\r\n        for (var a = arguments[i], j = 0, jl = a.length; j < jl; j++, k++)\r\n            r[k] = a[j];\r\n    return r;\r\n};\r\n\r\nexport function __await(v) {\r\n    return this instanceof __await ? (this.v = v, this) : new __await(v);\r\n}\r\n\r\nexport function __asyncGenerator(thisArg, _arguments, generator) {\r\n    if (!Symbol.asyncIterator) throw new TypeError(\"Symbol.asyncIterator is not defined.\");\r\n    var g = generator.apply(thisArg, _arguments || []), i, q = [];\r\n    return i = {}, verb(\"next\"), verb(\"throw\"), verb(\"return\"), i[Symbol.asyncIterator] = function () { return this; }, i;\r\n    function verb(n) { if (g[n]) i[n] = function (v) { return new Promise(function (a, b) { q.push([n, v, a, b]) > 1 || resume(n, v); }); }; }\r\n    function resume(n, v) { try { step(g[n](v)); } catch (e) { settle(q[0][3], e); } }\r\n    function step(r) { r.value instanceof __await ? Promise.resolve(r.value.v).then(fulfill, reject) : settle(q[0][2], r); }\r\n    function fulfill(value) { resume(\"next\", value); }\r\n    function reject(value) { resume(\"throw\", value); }\r\n    function settle(f, v) { if (f(v), q.shift(), q.length) resume(q[0][0], q[0][1]); }\r\n}\r\n\r\nexport function __asyncDelegator(o) {\r\n    var i, p;\r\n    return i = {}, verb(\"next\"), verb(\"throw\", function (e) { throw e; }), verb(\"return\"), i[Symbol.iterator] = function () { return this; }, i;\r\n    function verb(n, f) { i[n] = o[n] ? function (v) { return (p = !p) ? { value: __await(o[n](v)), done: n === \"return\" } : f ? f(v) : v; } : f; }\r\n}\r\n\r\nexport function __asyncValues(o) {\r\n    if (!Symbol.asyncIterator) throw new TypeError(\"Symbol.asyncIterator is not defined.\");\r\n    var m = o[Symbol.asyncIterator], i;\r\n    return m ? m.call(o) : (o = typeof __values === \"function\" ? __values(o) : o[Symbol.iterator](), i = {}, verb(\"next\"), verb(\"throw\"), verb(\"return\"), i[Symbol.asyncIterator] = function () { return this; }, i);\r\n    function verb(n) { i[n] = o[n] && function (v) { return new Promise(function (resolve, reject) { v = o[n](v), settle(resolve, reject, v.done, v.value); }); }; }\r\n    function settle(resolve, reject, d, v) { Promise.resolve(v).then(function(v) { resolve({ value: v, done: d }); }, reject); }\r\n}\r\n\r\nexport function __makeTemplateObject(cooked, raw) {\r\n    if (Object.defineProperty) { Object.defineProperty(cooked, \"raw\", { value: raw }); } else { cooked.raw = raw; }\r\n    return cooked;\r\n};\r\n\r\nexport function __importStar(mod) {\r\n    if (mod && mod.__esModule) return mod;\r\n    var result = {};\r\n    if (mod != null) for (var k in mod) if (Object.hasOwnProperty.call(mod, k)) result[k] = mod[k];\r\n    result.default = mod;\r\n    return result;\r\n}\r\n\r\nexport function __importDefault(mod) {\r\n    return (mod && mod.__esModule) ? mod : { default: mod };\r\n}\r\n\r\nexport function __classPrivateFieldGet(receiver, privateMap) {\r\n    if (!privateMap.has(receiver)) {\r\n        throw new TypeError(\"attempted to get private field on non-instance\");\r\n    }\r\n    return privateMap.get(receiver);\r\n}\r\n\r\nexport function __classPrivateFieldSet(receiver, privateMap, value) {\r\n    if (!privateMap.has(receiver)) {\r\n        throw new TypeError(\"attempted to set private field on non-instance\");\r\n    }\r\n    privateMap.set(receiver, value);\r\n    return value;\r\n}\r\n","type ExtensionMap = Record<string, boolean>;\n\n/**\n * The list of extensions that can be played.\n * @readonly\n * @memberof utils\n */\nconst extensions: string[] = [\n    'mp3',\n    'ogg',\n    'oga',\n    'opus',\n    'mpeg',\n    'wav',\n    'm4a',\n    'aiff',\n    'wma',\n    'mid',\n    'caf',\n];\n\n/**\n * The list of browser supported audio formats.\n * @readonly\n * @memberof utils\n * @property {boolean} mp3 - `true` if file-type is supported\n * @property {boolean} ogg - `true` if file-type is supported\n * @property {boolean} oga - `true` if file-type is supported\n * @property {boolean} opus - `true` if file-type is supported\n * @property {boolean} mpeg - `true` if file-type is supported\n * @property {boolean} wav - `true` if file-type is supported\n * @property {boolean} aiff - `true` if file-type is supported\n * @property {boolean} wma - `true` if file-type is supported\n * @property {boolean} mid - `true` if file-type is supported\n * @property {boolean} caf - `true` if file-type is supported. Note that for this we check if the\n *                             'opus' codec is supported inside the caf container.\n */\nconst supported: ExtensionMap = {};\n\n/**\n * Function to validate file type formats. This is called when the library initializes, but can\n * be called again if you need to recognize a format not listed in `utils.extensions` at\n * initialization.\n * @memberof utils\n * @param typeOverrides - - Dictionary of type overrides (inputs for\n *                                 AudioElement.canPlayType()), keyed by extension from the\n *                                 utils.extensions array.\n */\nfunction validateFormats(typeOverrides?: Record<string, string>): void\n{\n    const overrides: Record<string, string> = {\n        m4a: 'audio/mp4',\n        oga: 'audio/ogg',\n        opus: 'audio/ogg; codecs=\"opus\"',\n        caf: 'audio/x-caf; codecs=\"opus\"', ...(typeOverrides || {}) };\n    const audio = document.createElement('audio');\n    const formats: ExtensionMap = {};\n    const no = /^no$/;\n\n    extensions.forEach((ext) =>\n    {\n        const canByExt = audio.canPlayType(`audio/${ext}`).replace(no, '');\n        const canByType = overrides[ext] ? audio.canPlayType(overrides[ext]).replace(no, '') : '';\n\n        formats[ext] = !!canByExt || !!canByType;\n    });\n    Object.assign(supported, formats);\n}\n\n// initialize supported\nvalidateFormats();\n\nexport {\n    validateFormats,\n    supported,\n    extensions\n};\n","import type { ILoaderResource } from '@pixi/loaders';\nimport { supported } from './supported';\n\n/**\n * RegExp for looking for format patterns.\n * @ignore\n */\nconst FORMAT_PATTERN = /\\.(\\{([^\\}]+)\\})(\\?.*)?$/;\n\n/**\n * Resolve a URL with different formats in glob pattern to\n * a path based on the supported browser format. For instance:\n * \"sounds/music.{ogg,mp3}\", would resolve to \"sounds/music.ogg\"\n * if \"ogg\" support is found, otherwise, fallback to \"sounds.music.mp3\"\n * @memberof utils\n * @param {string|PIXI.LoaderResource} source - - Path to resolve or Resource, if\n *        a Resource object is provided, automatically updates the extension and url\n *        of that object.\n * @return The format to resolve to\n */\nfunction resolveUrl(source: string | ILoaderResource): string\n{\n    // search for patterns like \".{mp3,ogg}\"\"\n    const glob = FORMAT_PATTERN;\n    const url: string = typeof source === 'string' ? source : source.url;\n\n    if (!glob.test(url))\n    {\n        return url;\n    }\n\n    const match = glob.exec(url);\n    const exts = match[2].split(',');\n    let replace = exts[exts.length - 1]; // fallback to last ext\n\n    for (let i = 0, len = exts.length; i < len; i++)\n    {\n        const ext = exts[i];\n\n        if (supported[ext])\n        {\n            replace = ext;\n            break;\n        }\n    }\n    const resolved = url.replace(match[1], replace);\n\n    if (!(typeof source === 'string'))\n    {\n        // resource-loader marks these as readonly\n        const writableSource = source as { extension: string, url: string };\n\n        writableSource.extension = replace;\n        writableSource.url = resolved;\n    }\n\n    return resolved;\n}\n\nexport { resolveUrl };\n","import { ILoaderPlugin, ILoaderResource, LoaderResource } from '@pixi/loaders';\nimport { getInstance } from './instance';\nimport { resolveUrl } from './utils/resolveUrl';\nimport { extensions } from './utils/supported';\n\n/**\n * Sound middleware installation utilities for PIXI.Loader\n */\nclass SoundLoader implements ILoaderPlugin\n{\n    /** Used for PixiJS 6.5.0 extensions API */\n    static extension = 'loader';\n\n    /** Install the middleware */\n    public static add(): void\n    {\n        SoundLoader.setLegacy(getInstance().useLegacy);\n    }\n\n    /**\n     * Set the legacy mode\n     * @param legacy - Non-webaudio environments\n     */\n    static setLegacy(legacy: boolean): void\n    {\n        // Configure PIXI Loader to handle audio files correctly\n        const exts = extensions;\n\n        // Make sure we support webaudio\n        if (!legacy)\n        {\n            // Load all audio files as ArrayBuffers\n            exts.forEach((ext) =>\n            {\n                LoaderResource.setExtensionXhrType(ext, LoaderResource.XHR_RESPONSE_TYPE.BUFFER);\n                LoaderResource.setExtensionLoadType(ext, LoaderResource.LOAD_TYPE.XHR);\n            });\n        }\n        else\n        {\n            // Fall back to loading as <audio> elements\n            exts.forEach((ext) =>\n            {\n                LoaderResource.setExtensionXhrType(ext, LoaderResource.XHR_RESPONSE_TYPE.DEFAULT);\n                LoaderResource.setExtensionLoadType(ext, LoaderResource.LOAD_TYPE.AUDIO);\n            });\n        }\n    }\n\n    /** Handle the preprocessing of file paths */\n    public static pre(resource: ILoaderResource, next: () => void): void\n    {\n        resolveUrl(resource);\n        next();\n    }\n\n    /** Actual resource-loader middleware for sound class */\n    public static use(resource: ILoaderResource, next: () => void): void\n    {\n        if (resource.data && extensions.indexOf(resource.extension) > -1)\n        {\n            (resource as any).sound = getInstance().add(resource.name, {\n                loaded: next,\n                preload: true,\n                url: resource.url,\n                source: resource.data,\n            });\n        }\n        else\n        {\n            next();\n        }\n    }\n}\n\nexport { SoundLoader };\n","import { Ticker } from '@pixi/ticker';\nimport { EventEmitter } from '@pixi/utils';\nimport { IMediaInstance } from '../interfaces/IMediaInstance';\nimport { PlayOptions } from '../Sound';\nimport { HTMLAudioMedia } from './HTMLAudioMedia';\nimport { Filter } from '../filters/Filter';\n\nlet id = 0;\n\n/**\n * Instance which wraps the `<audio>` element playback.\n * @memberof htmlaudio\n * @extends PIXI.util.EventEmitter\n */\nclass HTMLAudioInstance extends EventEmitter implements IMediaInstance\n{\n    /** Extra padding, in seconds, to deal with low-latecy of HTMLAudio. */\n    public static readonly PADDING: number = 0.1;\n\n    /** The current unique ID for this instance. */\n    public readonly id: number;\n\n    /** The instance of the Audio element. */\n    private _source: HTMLAudioElement;\n\n    /** The instance of the Audio media element. */\n    private _media: HTMLAudioMedia;\n\n    /** Playback rate, where 1 is 100%. */\n    private _end: number;\n\n    /** Current instance paused state. */\n    private _paused: boolean;\n\n    /** Current instance muted state. */\n    private _muted: boolean;\n\n    /** Current actual paused state. */\n    private _pausedReal: boolean;\n\n    /** Total length of the audio. */\n    private _duration: number;\n\n    /** Playback rate, where 1 is 100%. */\n    private _start: number;\n\n    /** `true` if the audio is actually playing. */\n    private _playing: boolean;\n\n    /** Volume for the instance. */\n    private _volume: number;\n\n    /** Speed for the instance. */\n    private _speed: number;\n\n    /** `true` for looping the playback */\n    private _loop: boolean;\n\n    /** @param parent - Parent element */\n    constructor(parent: HTMLAudioMedia)\n    {\n        super();\n\n        this.id = id++;\n\n        this.init(parent);\n    }\n\n    /**\n     * Set a property by name, this makes it easy to chain values\n     * @param name - Name of the property to set\n     * @param value - Value to set property to\n     */\n    public set(name: 'speed' | 'volume' | 'muted' | 'loop' | 'paused', value: number | boolean): this\n    {\n        if (this[name] === undefined)\n        {\n            throw new Error(`Property with name ${name} does not exist.`);\n        }\n        else\n        {\n            switch (name)\n            {\n                case 'speed': this.speed = value as number; break;\n                case 'volume': this.volume = value as number; break;\n                case 'paused': this.paused = value as boolean; break;\n                case 'loop': this.loop = value as boolean; break;\n                case 'muted': this.muted = value as boolean; break;\n            }\n        }\n\n        return this;\n    }\n\n    /** The current playback progress from 0 to 1. */\n    public get progress(): number\n    {\n        const { currentTime } = this._source;\n\n        return currentTime / this._duration;\n    }\n\n    /** Pauses the sound. */\n    public get paused(): boolean\n    {\n        return this._paused;\n    }\n    public set paused(paused: boolean)\n    {\n        this._paused = paused;\n        this.refreshPaused();\n    }\n\n    /**\n     * Reference: http://stackoverflow.com/a/40370077\n     * @private\n     */\n    private _onPlay(): void\n    {\n        this._playing = true;\n    }\n\n    /**\n     * Reference: http://stackoverflow.com/a/40370077\n     * @private\n     */\n    private _onPause(): void\n    {\n        this._playing = false;\n    }\n\n    /**\n     * Initialize the instance.\n     * @param {htmlaudio.HTMLAudioMedia} media - Same as constructor\n     */\n    public init(media: HTMLAudioMedia): void\n    {\n        this._playing = false;\n        this._duration = media.source.duration;\n        const source = this._source = media.source.cloneNode(false) as HTMLAudioElement;\n\n        source.src = media.parent.url;\n        source.onplay = this._onPlay.bind(this);\n        source.onpause = this._onPause.bind(this);\n        media.context.on('refresh', this.refresh, this);\n        media.context.on('refreshPaused', this.refreshPaused, this);\n        this._media = media;\n    }\n\n    /**\n     * Stop the sound playing\n     * @private\n     */\n    private _internalStop(): void\n    {\n        if (this._source && this._playing)\n        {\n            this._source.onended = null;\n            this._source.pause();\n        }\n    }\n\n    /** Stop the sound playing */\n    public stop(): void\n    {\n        this._internalStop();\n\n        if (this._source)\n        {\n            this.emit('stop');\n        }\n    }\n\n    /** Set the instance speed from 0 to 1 */\n    public get speed(): number\n    {\n        return this._speed;\n    }\n    public set speed(speed: number)\n    {\n        this._speed = speed;\n        this.refresh();\n    }\n\n    /** Get the set the volume for this instance from 0 to 1 */\n    public get volume(): number\n    {\n        return this._volume;\n    }\n    public set volume(volume: number)\n    {\n        this._volume = volume;\n        this.refresh();\n    }\n\n    /** If the sound instance should loop playback */\n    public get loop(): boolean\n    {\n        return this._loop;\n    }\n    public set loop(loop: boolean)\n    {\n        this._loop = loop;\n        this.refresh();\n    }\n\n    /** `true` if the sound is muted */\n    public get muted(): boolean\n    {\n        return this._muted;\n    }\n    public set muted(muted: boolean)\n    {\n        this._muted = muted;\n        this.refresh();\n    }\n\n    /**\n     * HTML Audio does not support filters, this is non-functional API.\n     */\n    public get filters(): Filter[]\n    {\n        console.warn('HTML Audio does not support filters');\n\n        return null;\n    }\n    public set filters(_filters: Filter[])\n    {\n        console.warn('HTML Audio does not support filters');\n    }\n\n    /** Call whenever the loop, speed or volume changes */\n    public refresh(): void\n    {\n        const global = this._media.context;\n        const sound = this._media.parent;\n\n        // Update the looping\n        this._source.loop = this._loop || sound.loop;\n\n        // Update the volume\n        const globalVolume = global.volume * (global.muted ? 0 : 1);\n        const soundVolume = sound.volume * (sound.muted ? 0 : 1);\n        const instanceVolume = this._volume * (this._muted ? 0 : 1);\n\n        this._source.volume = instanceVolume * globalVolume * soundVolume;\n\n        // Update the speed\n        this._source.playbackRate = this._speed * global.speed * sound.speed;\n    }\n\n    /** Handle changes in paused state, either globally or sound or instance */\n    public refreshPaused(): void\n    {\n        const global = this._media.context;\n        const sound = this._media.parent;\n\n        // Handle the paused state\n        const pausedReal = this._paused || sound.paused || global.paused;\n\n        if (pausedReal !== this._pausedReal)\n        {\n            this._pausedReal = pausedReal;\n\n            if (pausedReal)\n            {\n                this._internalStop();\n\n                /**\n                 * The sound is paused.\n                 * @event paused\n                 */\n                this.emit('paused');\n            }\n            else\n            {\n                /**\n                 * The sound is unpaused.\n                 * @event resumed\n                 */\n                this.emit('resumed');\n\n                // resume the playing with offset\n                this.play({\n                    start: this._source.currentTime,\n                    end: this._end,\n                    volume: this._volume,\n                    speed: this._speed,\n                    loop: this._loop,\n                });\n            }\n\n            /**\n             * The sound is paused or unpaused.\n             * @event pause\n             * @property {boolean} paused - If the instance was paused or not.\n             */\n            this.emit('pause', pausedReal);\n        }\n    }\n\n    /** Start playing the sound/ */\n    public play(options: PlayOptions): void\n    {\n        const { start, end, speed, loop, volume, muted } = options;\n\n        if (end)\n        {\n            // eslint-disable-next-line no-console\n            console.assert(end > start, 'End time is before start time');\n        }\n\n        this._speed = speed;\n        this._volume = volume;\n        this._loop = !!loop;\n        this._muted = muted;\n        this.refresh();\n\n        // WebAudio doesn't support looping when a duration is set\n        // we'll set this just for the heck of it\n        if (this.loop && end !== null)\n        {\n            console.warn('Looping not support when specifying an \"end\" time');\n            this.loop = false;\n        }\n\n        this._start = start;\n        this._end = end || this._duration;\n\n        // Lets expand the start and end a little\n        // to deal with the low-latecy of playing audio this way\n        // this is a little fudge-factor\n        this._start = Math.max(0, this._start - HTMLAudioInstance.PADDING);\n        this._end = Math.min(this._end + HTMLAudioInstance.PADDING, this._duration);\n\n        this._source.onloadedmetadata = () =>\n        {\n            if (this._source)\n            {\n                this._source.currentTime = start;\n                this._source.onloadedmetadata = null;\n                this.emit('progress', start, this._duration);\n                Ticker.shared.add(this._onUpdate, this);\n            }\n        };\n        this._source.onended = this._onComplete.bind(this);\n        this._source.play();\n\n        /**\n         * The sound is started.\n         * @event start\n         */\n        this.emit('start');\n    }\n\n    /**\n     * Handle time update on sound.\n     * @private\n     */\n    private _onUpdate(): void\n    {\n        this.emit('progress', this.progress, this._duration);\n        if (this._source.currentTime >= this._end && !this._source.loop)\n        {\n            this._onComplete();\n        }\n    }\n\n    /**\n     * Callback when completed.\n     * @private\n     */\n    private _onComplete(): void\n    {\n        Ticker.shared.remove(this._onUpdate, this);\n        this._internalStop();\n        this.emit('progress', 1, this._duration);\n        /**\n         * The sound ends, don't use after this\n         * @event end\n         */\n        this.emit('end', this);\n    }\n\n    /** Don't use after this. */\n    public destroy(): void\n    {\n        Ticker.shared.remove(this._onUpdate, this);\n        this.removeAllListeners();\n\n        const source = this._source;\n\n        if (source)\n        {\n            // Remove the listeners\n            source.onended = null;\n            source.onplay = null;\n            source.onpause = null;\n\n            this._internalStop();\n        }\n\n        this._source = null;\n        this._speed = 1;\n        this._volume = 1;\n        this._loop = false;\n        this._end = null;\n        this._start = 0;\n        this._duration = 0;\n        this._playing = false;\n        this._pausedReal = false;\n        this._paused = false;\n        this._muted = false;\n\n        if (this._media)\n        {\n            this._media.context.off('refresh', this.refresh, this);\n            this._media.context.off('refreshPaused', this.refreshPaused, this);\n            this._media = null;\n        }\n    }\n\n    /**\n     * To string method for instance.\n     * @return The string representation of instance.\n     */\n    public toString(): string\n    {\n        return `[HTMLAudioInstance id=${this.id}]`;\n    }\n}\n\nexport { HTMLAudioInstance };\n","import { EventEmitter } from '@pixi/utils';\nimport { Filter } from '../filters/Filter';\nimport { IMedia } from '../interfaces/IMedia';\nimport { LoadedCallback, Sound } from '../Sound';\nimport { HTMLAudioContext } from './HTMLAudioContext';\nimport { HTMLAudioInstance } from './HTMLAudioInstance';\n\n/**\n * The fallback version of Sound which uses `<audio>` instead of WebAudio API.\n * @memberof htmlaudio\n * @extends PIXI.util.EventEmitter\n */\nclass HTMLAudioMedia extends EventEmitter implements IMedia\n{\n    public parent: Sound;\n    private _source: HTMLAudioElement;\n\n    public init(parent: Sound): void\n    {\n        this.parent = parent;\n        this._source = parent.options.source as HTMLAudioElement || new Audio();\n        if (parent.url)\n        {\n            this._source.src = parent.url;\n        }\n    }\n\n    // Implement create\n    public create(): HTMLAudioInstance\n    {\n        return new HTMLAudioInstance(this);\n    }\n\n    /**\n     * If the audio media is playable (ready).\n     * @readonly\n     */\n    public get isPlayable(): boolean\n    {\n        return !!this._source && this._source.readyState === 4;\n    }\n\n    /**\n     * THe duration of the media in seconds.\n     * @readonly\n     */\n    public get duration(): number\n    {\n        return this._source.duration;\n    }\n\n    /**\n     * Reference to the context.\n     * @readonly\n     */\n    public get context(): HTMLAudioContext\n    {\n        return this.parent.context as HTMLAudioContext;\n    }\n\n    /** The collection of filters, does not apply to HTML Audio. */\n    public get filters(): Filter[]\n    {\n        return null;\n    }\n    public set filters(_filters: Filter[])\n    {\n        console.warn('HTML Audio does not support filters');\n    }\n\n    // Override the destroy\n    public destroy(): void\n    {\n        this.removeAllListeners();\n\n        this.parent = null;\n\n        if (this._source)\n        {\n            this._source.src = '';\n            this._source.load();\n            this._source = null;\n        }\n    }\n\n    /**\n     * Get the audio source element.\n     * @type {HTMLAudioElement}\n     * @readonly\n     */\n    public get source(): HTMLAudioElement\n    {\n        return this._source;\n    }\n\n    // Implement the method to being preloading\n    public load(callback?: LoadedCallback): void\n    {\n        const source = this._source;\n        const sound = this.parent;\n\n        // See if the source is already loaded\n        if (source.readyState === 4)\n        {\n            sound.isLoaded = true;\n            const instance = sound.autoPlayStart();\n\n            if (callback)\n            {\n                setTimeout(() =>\n                {\n                    callback(null, sound, instance);\n                }, 0);\n            }\n\n            return;\n        }\n\n        // If there's no source, we cannot load\n        if (!sound.url)\n        {\n            callback(new Error('sound.url or sound.source must be set'));\n\n            return;\n        }\n\n        // Set the source\n        source.src = sound.url;\n\n        const onLoad = () =>\n        {\n            // eslint-disable-next-line @typescript-eslint/no-use-before-define\n            removeListeners();\n            sound.isLoaded = true;\n            const instance = sound.autoPlayStart();\n\n            if (callback)\n            {\n                callback(null, sound, instance);\n            }\n        };\n\n        const onAbort = () =>\n        {\n            // eslint-disable-next-line @typescript-eslint/no-use-before-define\n            removeListeners();\n            if (callback)\n            {\n                callback(new Error('Sound loading has been aborted'));\n            }\n        };\n\n        const onError = () =>\n        {\n            // eslint-disable-next-line @typescript-eslint/no-use-before-define\n            removeListeners();\n            const message = `Failed to load audio element (code: ${source.error.code})`;\n\n            if (callback)\n            {\n                callback(new Error(message));\n            }\n            else\n            {\n                console.error(message);\n            }\n        };\n\n        // Remove all event listeners\n        const removeListeners = () =>\n        {\n            // Listen for callback\n            source.removeEventListener('canplaythrough', onLoad);\n            source.removeEventListener('load', onLoad);\n            source.removeEventListener('abort', onAbort);\n            source.removeEventListener('error', onError);\n        };\n\n        // Listen for callback\n        source.addEventListener('canplaythrough', onLoad, false);\n        source.addEventListener('load', onLoad, false);\n        source.addEventListener('abort', onAbort, false);\n        source.addEventListener('error', onError, false);\n\n        // Begin the loading\n        source.load();\n    }\n}\n\nexport { HTMLAudioMedia };\n","import { IMediaInstance } from './interfaces';\nimport { CompleteCallback, Sound } from './Sound';\n\n/** Data for adding new sound sprites. */\ninterface SoundSpriteData {\n    /** The start time in seconds. */\n    start: number;\n    /** The end time in seconds. */\n    end: number;\n    /** The optional speed, if not speed, uses the default speed of the parent. */\n    speed?: number;\n}\n\n// Collection of sound sprites\ntype SoundSprites = Record<string, SoundSprite>;\n\n/**\n * Object that represents a single Sound's sprite. To add sound sprites\n * use the {@link Sound#addSprites} method.\n * @example\n * import { sound } from '@pixi/sound';\n * sound.add('alias', {\n *   url: 'path/to/file.ogg',\n *   sprites: {\n *     blast: { start: 0, end: 0.2 },\n *     boom: { start: 0.3, end: 0.5 },\n *   },\n *   loaded() {\n *     sound.play('alias', 'blast');\n *   }\n * );\n *\n */\nclass SoundSprite\n{\n    /**\n     * The reference sound\n     * @readonly\n     */\n    public parent: Sound;\n\n    /**\n     * The starting location in seconds.\n     * @readonly\n     */\n    public start: number;\n\n    /**\n     * The ending location in seconds\n     * @readonly\n     */\n    public end: number;\n\n    /**\n     * The speed override where 1 is 100% speed playback.\n     * @readonly\n     */\n    public speed: number;\n\n    /**\n     * The duration of the sound in seconds.\n     * @readonly\n     */\n    public duration: number;\n\n    /**\n     * Whether to loop the sound sprite.\n     * @readonly\n     */\n    public loop: boolean;\n\n    /**\n     * @param parent - The parent sound\n     * @param options - Data associated with object.\n     */\n    constructor(parent: Sound, options: SoundSpriteData)\n    {\n        this.parent = parent;\n        Object.assign(this, options);\n        this.duration = this.end - this.start;\n\n        // eslint-disable-next-line no-console\n        console.assert(this.duration > 0, 'End time must be after start time');\n    }\n\n    /**\n     * Play the sound sprite.\n     * @param {Function} [complete] - Function call when complete\n     * @return Sound instance being played.\n     */\n    public play(complete?: CompleteCallback): IMediaInstance | Promise<IMediaInstance>\n    {\n        return this.parent.play({\n            complete,\n            speed: this.speed || this.parent.speed,\n            end: this.end,\n            start: this.start,\n            loop: this.loop });\n    }\n\n    /** Destroy and don't use after this */\n    public destroy(): void\n    {\n        this.parent = null;\n    }\n}\n\nexport type { SoundSprites, SoundSpriteData };\nexport { SoundSprite };\n","import { getInstance } from '../instance';\nimport { WebAudioContext } from './WebAudioContext';\n\n/**\n * Internal class for Web Audio abstractions and convenience methods.\n * @memberof webaudio\n */\nclass WebAudioUtils\n{\n    /**\n     * Dezippering is removed in the future Web Audio API, instead\n     * we use the `setValueAtTime` method, however, this is not available\n     * in all environments (e.g., Android webview), so we fallback to the `value` setter.\n     * @param param - AudioNode parameter object\n     * @param value - Value to set\n     * @return The value set\n     */\n    public static setParamValue(param: AudioParam, value: number): number\n    {\n        if (param.setValueAtTime)\n        {\n            const context = getInstance().context as WebAudioContext;\n\n            param.setValueAtTime(value, context.audioContext.currentTime);\n        }\n        else\n        {\n            param.value = value;\n        }\n\n        return value;\n    }\n}\n\nexport { WebAudioUtils };\n","import { Ticker } from '@pixi/ticker';\nimport { EventEmitter } from '@pixi/utils';\nimport { IMediaInstance } from '../interfaces';\nimport { PlayOptions } from '../Sound';\nimport { WebAudioMedia } from './WebAudioMedia';\nimport { WebAudioUtils } from './WebAudioUtils';\nimport { Filter } from '../filters/Filter';\n\nlet id = 0;\n\n/**\n * A single play instance that handles the AudioBufferSourceNode.\n * @memberof webaudio\n * @extends PIXI.utils.EventEmitter\n */\nclass WebAudioInstance extends EventEmitter implements IMediaInstance\n{\n    /**\n     * The current unique ID for this instance.\n     * @readonly\n     */\n    public readonly id: number;\n\n    /** The source Sound. */\n    private _media: WebAudioMedia;\n\n    /** true if paused. */\n    private _paused: boolean;\n\n    /** true if muted. */\n    private _muted: boolean;\n\n    /** true if paused. */\n    private _pausedReal: boolean;\n\n    /** The instance volume */\n    private _volume: number;\n\n    /** Last update frame number. */\n    private _lastUpdate: number;\n\n    /** The total number of seconds elapsed in playback. */\n    private _elapsed: number;\n\n    /** Playback rate, where 1 is 100%. */\n    private _speed: number;\n\n    /** Playback rate, where 1 is 100%. */\n    private _end: number;\n\n    /** `true` if should be looping. */\n    private _loop: boolean;\n\n    /** Gain node for controlling volume of instance */\n    private _gain: GainNode;\n\n    /** Length of the sound in seconds. */\n    private _duration: number;\n\n    /** The progress of the sound from 0 to 1. */\n    private _progress: number;\n\n    /** Audio buffer source clone from Sound object. */\n    private _source: AudioBufferSourceNode;\n\n    /** The filters */\n    private _filters: Filter[];\n\n    constructor(media: WebAudioMedia)\n    {\n        super();\n\n        this.id = id++;\n        this._media = null;\n        this._paused = false;\n        this._muted = false;\n        this._elapsed = 0;\n\n        // Initialize\n        this.init(media);\n    }\n\n    /**\n     * Set a property by name, this makes it easy to chain values\n     * @param name - Name of the property to set.\n     * @param value - Value to set property to.\n     */\n    public set(name: 'speed' | 'volume' | 'muted' | 'loop' | 'paused', value: number | boolean): this\n    {\n        if (this[name] === undefined)\n        {\n            throw new Error(`Property with name ${name} does not exist.`);\n        }\n        else\n        {\n            switch (name)\n            {\n                case 'speed': this.speed = value as number; break;\n                case 'volume': this.volume = value as number; break;\n                case 'muted': this.muted = value as boolean; break;\n                case 'loop': this.loop = value as boolean; break;\n                case 'paused': this.paused = value as boolean; break;\n            }\n        }\n\n        return this;\n    }\n\n    /** Stops the instance, don't use after this. */\n    public stop(): void\n    {\n        if (this._source)\n        {\n            this._internalStop();\n            this.emit('stop');\n        }\n    }\n\n    /** Set the instance speed from 0 to 1 */\n    public get speed(): number\n    {\n        return this._speed;\n    }\n    public set speed(speed: number)\n    {\n        this._speed = speed;\n        this.refresh();\n        this._update(true); // update progress\n    }\n\n    /** Get the set the volume for this instance from 0 to 1 */\n    public get volume(): number\n    {\n        return this._volume;\n    }\n    public set volume(volume: number)\n    {\n        this._volume = volume;\n        this.refresh();\n    }\n\n    /** `true` if the sound is muted */\n    public get muted(): boolean\n    {\n        return this._muted;\n    }\n    public set muted(muted: boolean)\n    {\n        this._muted = muted;\n        this.refresh();\n    }\n\n    /** If the sound instance should loop playback */\n    public get loop(): boolean\n    {\n        return this._loop;\n    }\n    public set loop(loop: boolean)\n    {\n        this._loop = loop;\n        this.refresh();\n    }\n\n    /** The collection of filters. */\n    public get filters(): Filter[]\n    {\n        return this._filters;\n    }\n    public set filters(filters: Filter[])\n    {\n        if (this._filters)\n        {\n            this._filters?.filter((filter) => filter).forEach((filter) => filter.disconnect());\n            this._filters = null;\n            // Reconnect direct path\n            this._source.connect(this._gain);\n        }\n        this._filters = filters?.length ? filters.slice(0) : null;\n        this.refresh();\n    }\n\n    /** Refresh loop, volume and speed based on changes to parent */\n    public refresh(): void\n    {\n        // Sound could be paused\n        if (!this._source)\n        {\n            return;\n        }\n        const global = this._media.context;\n        const sound = this._media.parent;\n\n        // Updating looping\n        this._source.loop = this._loop || sound.loop;\n\n        // Update the volume\n        const globalVolume = global.volume * (global.muted ? 0 : 1);\n        const soundVolume = sound.volume * (sound.muted ? 0 : 1);\n        const instanceVolume = this._volume * (this._muted ? 0 : 1);\n\n        WebAudioUtils.setParamValue(this._gain.gain, instanceVolume * soundVolume * globalVolume);\n\n        // Update the speed\n        WebAudioUtils.setParamValue(this._source.playbackRate, this._speed * sound.speed * global.speed);\n\n        this.applyFilters();\n    }\n\n    /** Connect filters nodes to audio context */\n    private applyFilters(): void\n    {\n        if (this._filters?.length)\n        {\n            // Disconnect direct path before inserting filters\n            this._source.disconnect();\n\n            // Connect each filter\n            let source: { connect: (node: AudioNode) => void } = this._source;\n\n            this._filters.forEach((filter: Filter) =>\n            {\n                source.connect(filter.destination);\n                source = filter;\n            });\n            source.connect(this._gain);\n        }\n    }\n\n    /** Handle changes in paused state, either globally or sound or instance */\n    public refreshPaused(): void\n    {\n        const global = this._media.context;\n        const sound = this._media.parent;\n\n        // Consider global and sound paused\n        const pausedReal = this._paused || sound.paused || global.paused;\n\n        if (pausedReal !== this._pausedReal)\n        {\n            this._pausedReal = pausedReal;\n\n            if (pausedReal)\n            {\n                // pause the sounds\n                this._internalStop();\n\n                /**\n                 * The sound is paused.\n                 * @event paused\n                 */\n                this.emit('paused');\n            }\n            else\n            {\n                /**\n                 * The sound is unpaused.\n                 * @event resumed\n                 */\n                this.emit('resumed');\n\n                // resume the playing with offset\n                this.play({\n                    start: this._elapsed % this._duration,\n                    end: this._end,\n                    speed: this._speed,\n                    loop: this._loop,\n                    volume: this._volume,\n                });\n            }\n\n            /**\n             * The sound is paused or unpaused.\n             * @event pause\n             * @property {boolean} paused - If the instance was paused or not.\n             */\n            this.emit('pause', pausedReal);\n        }\n    }\n\n    /**\n     * Plays the sound.\n     * @param options - Play options.\n     */\n    public play(options: PlayOptions): void\n    {\n        const { start, end, speed, loop, volume, muted, filters } = options;\n\n        if (end)\n        {\n            // eslint-disable-next-line no-console\n            console.assert(end > start, 'End time is before start time');\n        }\n        this._paused = false;\n        const { source, gain } = this._media.nodes.cloneBufferSource();\n\n        this._source = source;\n        this._gain = gain;\n        this._speed = speed;\n        this._volume = volume;\n        this._loop = !!loop;\n        this._muted = muted;\n        this._filters = filters;\n        this.refresh();\n\n        const duration: number = this._source.buffer.duration;\n\n        this._duration = duration;\n        this._end = end;\n        this._lastUpdate = this._now();\n        this._elapsed = start;\n        this._source.onended = this._onComplete.bind(this);\n\n        if (this._loop)\n        {\n            this._source.loopEnd = end;\n            this._source.loopStart = start;\n            this._source.start(0, start);\n        }\n        else if (end)\n        {\n            this._source.start(0, start, end - start);\n        }\n        else\n        {\n            this._source.start(0, start);\n        }\n\n        /**\n         * The sound is started.\n         * @event start\n         */\n        this.emit('start');\n\n        // Do an update for the initial progress\n        this._update(true);\n\n        // Start handling internal ticks\n        this.enableTicker(true);\n    }\n\n    /** Start the update progress. */\n    private enableTicker(enabled: boolean): void\n    {\n        Ticker.shared.remove(this._updateListener, this);\n        if (enabled)\n        {\n            Ticker.shared.add(this._updateListener, this);\n        }\n    }\n\n    /** The current playback progress from 0 to 1. */\n    public get progress(): number\n    {\n        return this._progress;\n    }\n\n    /** Pauses the sound. */\n    public get paused(): boolean\n    {\n        return this._paused;\n    }\n\n    public set paused(paused: boolean)\n    {\n        this._paused = paused;\n        this.refreshPaused();\n    }\n\n    /** Don't use after this. */\n    public destroy(): void\n    {\n        this.removeAllListeners();\n        this._internalStop();\n        if (this._gain)\n        {\n            this._gain.disconnect();\n            this._gain = null;\n        }\n        if (this._media)\n        {\n            this._media.context.events.off('refresh', this.refresh, this);\n            this._media.context.events.off('refreshPaused', this.refreshPaused, this);\n            this._media = null;\n        }\n        this._filters?.forEach((filter) => filter.disconnect());\n        this._filters = null;\n        this._end = null;\n        this._speed = 1;\n        this._volume = 1;\n        this._loop = false;\n        this._elapsed = 0;\n        this._duration = 0;\n        this._paused = false;\n        this._muted = false;\n        this._pausedReal = false;\n    }\n\n    /**\n     * To string method for instance.\n     * @return The string representation of instance.\n     */\n    public toString(): string\n    {\n        return `[WebAudioInstance id=${this.id}]`;\n    }\n\n    /**\n     * Get the current time in seconds.\n     * @return Seconds since start of context\n     */\n    private _now(): number\n    {\n        return this._media.context.audioContext.currentTime;\n    }\n\n    /** Callback for update listener */\n    private _updateListener()\n    {\n        this._update();\n    }\n\n    /** Internal update the progress. */\n    private _update(force = false): void\n    {\n        if (this._source)\n        {\n            const now: number = this._now();\n            const delta: number = now - this._lastUpdate;\n\n            if (delta > 0 || force)\n            {\n                const speed: number = this._source.playbackRate.value;\n\n                this._elapsed += delta * speed;\n                this._lastUpdate = now;\n                const duration: number = this._duration;\n                let progress: number;\n\n                if (this._source.loopStart)\n                {\n                    const soundLength = this._source.loopEnd - this._source.loopStart;\n\n                    progress = (this._source.loopStart + (this._elapsed % soundLength)) / duration;\n                }\n                else\n                {\n                    progress = (this._elapsed % duration) / duration;\n                }\n\n                // Update the progress\n                this._progress = progress;\n\n                /**\n                 * The sound progress is updated.\n                 * @event progress\n                 * @property {number} progress - Amount progressed from 0 to 1\n                 * @property {number} duration - The total playback in seconds\n                 */\n                this.emit('progress', this._progress, duration);\n            }\n        }\n    }\n\n    /** Initializes the instance. */\n    public init(media: WebAudioMedia): void\n    {\n        this._media = media;\n        media.context.events.on('refresh', this.refresh, this);\n        media.context.events.on('refreshPaused', this.refreshPaused, this);\n    }\n\n    /** Stops the instance. */\n    private _internalStop(): void\n    {\n        if (this._source)\n        {\n            this.enableTicker(false);\n            this._source.onended = null;\n            this._source.stop(0); // param needed for iOS 8 bug\n            this._source.disconnect();\n            try\n            {\n                this._source.buffer = null;\n            }\n            catch (err)\n            {\n                // try/catch workaround for bug in older Chrome versions\n                console.warn('Failed to set AudioBufferSourceNode.buffer to null:', err);\n            }\n            this._source = null;\n        }\n    }\n\n    /** Callback when completed. */\n    private _onComplete(): void\n    {\n        if (this._source)\n        {\n            this.enableTicker(false);\n            this._source.onended = null;\n            this._source.disconnect();\n            try\n            {\n                this._source.buffer = null;\n            }\n            catch (err)\n            {\n                // try/catch workaround for bug in older Chrome versions\n                console.warn('Failed to set AudioBufferSourceNode.buffer to null:', err);\n            }\n        }\n        this._source = null;\n        this._progress = 1;\n        this.emit('progress', 1, this._duration);\n        /**\n         * The sound ends, don't use after this\n         * @event end\n         */\n        this.emit('end', this);\n    }\n}\n\nexport { WebAudioInstance };\n","import { Filter } from './filters/Filter';\n\n/**\n * Abstract class which SoundNodes and SoundContext\n * both extend. This provides the functionality for adding\n * dynamic filters.\n */\nclass Filterable\n{\n    /** Get the gain node */\n    private _input: AudioNode;\n\n    /** The destination output audio node */\n    private _output: AudioNode;\n\n    /** Collection of filters. */\n    private _filters: Filter[];\n\n    /**\n     * @param input - The source audio node\n     * @param output - The output audio node\n     */\n    constructor(input: AudioNode, output: AudioNode)\n    {\n        this._output = output;\n        this._input = input;\n    }\n\n    /** The destination output audio node */\n    get destination(): AudioNode\n    {\n        return this._input;\n    }\n\n    /** The collection of filters. */\n    get filters(): Filter[]\n    {\n        return this._filters;\n    }\n    set filters(filters: Filter[])\n    {\n        if (this._filters)\n        {\n            this._filters.forEach((filter: Filter) =>\n            {\n                if (filter)\n                {\n                    filter.disconnect();\n                }\n            });\n            this._filters = null;\n            // Reconnect direct path\n            this._input.connect(this._output);\n        }\n\n        if (filters && filters.length)\n        {\n            this._filters = filters.slice(0);\n\n            // Disconnect direct path before inserting filters\n            this._input.disconnect();\n\n            // Connect each filter\n            let prevFilter: Filter = null;\n\n            filters.forEach((filter: Filter) =>\n            {\n                if (prevFilter === null)\n                {\n                    // first filter is the destination\n                    // for the analyser\n                    this._input.connect(filter.destination);\n                }\n                else\n                {\n                    prevFilter.connect(filter.destination);\n                }\n                prevFilter = filter;\n            });\n            prevFilter.connect(this._output);\n        }\n    }\n\n    /** Cleans up. */\n    public destroy(): void\n    {\n        this.filters = null;\n        this._input = null;\n        this._output = null;\n    }\n}\n\nexport { Filterable };\n","import { Filterable } from '../Filterable';\nimport { WebAudioContext } from './WebAudioContext';\nimport { WebAudioUtils } from './WebAudioUtils';\n\n/** Output for cloning source node. */\ninterface SourceClone {\n    /** Cloned audio buffer source */\n    source: AudioBufferSourceNode;\n    /** Independent volume control */\n    gain: GainNode;\n}\n\n/**\n * @memberof webaudio\n */\nclass WebAudioNodes extends Filterable\n{\n    /**\n     * The buffer size for script processor, default is `0` which auto-detects. If you plan to use\n     * script node on iOS, you'll need to provide a non-zero amount.\n     * @default 0\n     */\n    public static BUFFER_SIZE = 0;\n\n    /**\n     * Get the buffer source node\n     * @readonly\n     */\n    public bufferSource: AudioBufferSourceNode;\n\n    /**\n     * Get the gain node\n     * @readonly\n     */\n    public gain: GainNode;\n\n    /**\n     * Get the analyser node\n     * @readonly\n     */\n    public analyser: AnalyserNode;\n\n    /**\n     * Reference to the SoundContext\n     * @readonly\n     */\n    public context: WebAudioContext;\n\n    /** Private reference to the script processor node. */\n    private _script: ScriptProcessorNode;\n\n    /**\n     * @param context - The audio context.\n     */\n    constructor(context: WebAudioContext)\n    {\n        const audioContext: AudioContext = context.audioContext;\n\n        const bufferSource: AudioBufferSourceNode = audioContext.createBufferSource();\n        const gain: GainNode = audioContext.createGain();\n        const analyser: AnalyserNode = audioContext.createAnalyser();\n\n        bufferSource.connect(analyser);\n        analyser.connect(gain);\n        gain.connect(context.destination);\n\n        super(analyser, gain);\n\n        this.context = context;\n        this.bufferSource = bufferSource;\n        this.gain = gain;\n        this.analyser = analyser;\n    }\n\n    /**\n     * Get the script processor node.\n     * @readonly\n     */\n    public get script(): ScriptProcessorNode\n    {\n        if (!this._script)\n        {\n            this._script = this.context.audioContext.createScriptProcessor(WebAudioNodes.BUFFER_SIZE);\n            this._script.connect(this.context.destination);\n        }\n\n        return this._script;\n    }\n\n    /** Cleans up. */\n    public destroy(): void\n    {\n        super.destroy();\n\n        this.bufferSource.disconnect();\n        if (this._script)\n        {\n            this._script.disconnect();\n        }\n        this.gain.disconnect();\n        this.analyser.disconnect();\n\n        this.bufferSource = null;\n        this._script = null;\n        this.gain = null;\n        this.analyser = null;\n\n        this.context = null;\n    }\n\n    /**\n     * Clones the bufferSource. Used just before playing a sound.\n     * @returns {SourceClone} The clone AudioBufferSourceNode.\n     */\n    public cloneBufferSource(): SourceClone\n    {\n        const orig: AudioBufferSourceNode = this.bufferSource;\n        const source: AudioBufferSourceNode = this.context.audioContext.createBufferSource();\n\n        source.buffer = orig.buffer;\n        WebAudioUtils.setParamValue(source.playbackRate, orig.playbackRate.value);\n        source.loop = orig.loop;\n\n        const gain: GainNode = this.context.audioContext.createGain();\n\n        source.connect(gain);\n        gain.connect(this.destination);\n\n        return { source, gain };\n    }\n\n    /**\n     * Get buffer size of `ScriptProcessorNode`.\n     * @readonly\n     */\n    get bufferSize(): number\n    {\n        return this.script.bufferSize;\n    }\n}\n\nexport type { SourceClone };\nexport { WebAudioNodes };\n","import { Filter } from '../filters/Filter';\nimport { IMedia } from '../interfaces/IMedia';\nimport { LoadedCallback, Sound } from '../Sound';\nimport { WebAudioContext } from './WebAudioContext';\nimport { WebAudioInstance } from './WebAudioInstance';\nimport { WebAudioNodes } from './WebAudioNodes';\n\n/**\n * Represents a single sound element. Can be used to play, pause, etc. sound instances.\n * @memberof webaudio\n */\nclass WebAudioMedia implements IMedia\n{\n    /**\n     * Reference to the parent Sound container.\n     * @readonly\n     */\n    public parent: Sound;\n\n    /**\n     * The file buffer to load.\n     * @readonly\n     */\n    public source: ArrayBuffer | AudioBuffer;\n\n    /** Instance of the chain builder. */\n    private _nodes: WebAudioNodes;\n\n    /** Instance of the source node. */\n    private _source: AudioBufferSourceNode;\n\n    /**\n     * Re-initialize without constructing.\n     * @param parent - - Instance of parent Sound container\n     */\n    public init(parent: Sound): void\n    {\n        this.parent = parent;\n        this._nodes = new WebAudioNodes(this.context);\n        this._source = this._nodes.bufferSource;\n        this.source = parent.options.source as ArrayBuffer | AudioBuffer;\n    }\n\n    /** Destructor, safer to use `SoundLibrary.remove(alias)` to remove this sound. */\n    public destroy(): void\n    {\n        this.parent = null;\n        this._nodes.destroy();\n        this._nodes = null;\n        try\n        {\n            this._source.buffer = null;\n        }\n        catch (err)\n        {\n            // try/catch workaround for bug in older Chrome versions\n            console.warn('Failed to set AudioBufferSourceNode.buffer to null:', err);\n        }\n        this._source = null;\n        this.source = null;\n    }\n\n    // Implement create\n    public create(): WebAudioInstance\n    {\n        return new WebAudioInstance(this);\n    }\n\n    // Implement context\n    public get context(): WebAudioContext\n    {\n        return this.parent.context as WebAudioContext;\n    }\n\n    // Implement isPlayable\n    public get isPlayable(): boolean\n    {\n        return !!this._source && !!this._source.buffer;\n    }\n\n    // Implement filters\n    public get filters(): Filter[]\n    {\n        return this._nodes.filters;\n    }\n    public set filters(filters: Filter[])\n    {\n        this._nodes.filters = filters;\n    }\n\n    // Implements duration\n    public get duration(): number\n    {\n        // eslint-disable-next-line no-console\n        console.assert(this.isPlayable, 'Sound not yet playable, no duration');\n\n        return this._source.buffer.duration;\n    }\n\n    /** Gets and sets the buffer. */\n    public get buffer(): AudioBuffer\n    {\n        return this._source.buffer;\n    }\n    public set buffer(buffer: AudioBuffer)\n    {\n        this._source.buffer = buffer;\n    }\n\n    /** Get the current chained nodes object */\n    public get nodes(): WebAudioNodes\n    {\n        return this._nodes;\n    }\n\n    // Implements load\n    public load(callback?: LoadedCallback): void\n    {\n        // Load from the arraybuffer, incase it was loaded outside\n        if (this.source)\n        {\n            this._decode(this.source, callback);\n        }\n        // Load from the file path\n        else if (this.parent.url)\n        {\n            this._loadUrl(callback);\n        }\n        else if (callback)\n        {\n            callback(new Error('sound.url or sound.source must be set'));\n        }\n        else\n        {\n            console.error('sound.url or sound.source must be set');\n        }\n    }\n\n    /** Loads a sound using XHMLHttpRequest object. */\n    private _loadUrl(callback?: LoadedCallback): void\n    {\n        const request = new XMLHttpRequest();\n        const url: string = this.parent.url;\n\n        request.open('GET', url, true);\n        request.responseType = 'arraybuffer';\n\n        // Decode asynchronously\n        request.onload = () =>\n        {\n            this.source = request.response as ArrayBuffer;\n            this._decode(request.response, callback);\n        };\n\n        request.onerror = () => callback(new Error(`Unable to load audio url: ${url}`));\n\n        // actually start the request\n        request.send();\n    }\n\n    /**\n     * Decodes the array buffer.\n     * @param arrayBuffer - From load.\n     * @param {Function} callback - Callback optional\n     */\n    private _decode(arrayBuffer: ArrayBuffer | AudioBuffer, callback?: LoadedCallback): void\n    {\n        const audioBufferReadyFn = (err: Error, buffer: AudioBuffer) =>\n        {\n            if (err)\n            {\n                if (callback)\n                {\n                    callback(err);\n                }\n            }\n            else\n            {\n                this.parent.isLoaded = true;\n                this.buffer = buffer;\n                const instance = this.parent.autoPlayStart();\n\n                if (callback)\n                {\n                    callback(null, this.parent, instance);\n                }\n            }\n        };\n\n        if (arrayBuffer instanceof AudioBuffer)\n        {\n            audioBufferReadyFn(null, arrayBuffer);\n        }\n        else\n        {\n            const context = this.parent.context as WebAudioContext;\n\n            context.decode(arrayBuffer, audioBufferReadyFn);\n        }\n    }\n}\n\nexport { WebAudioMedia };\n","import { Filter } from './filters/Filter';\nimport { HTMLAudioMedia } from './htmlaudio/HTMLAudioMedia';\nimport { getInstance } from './instance';\nimport { IMedia, IMediaContext, IMediaInstance } from './interfaces';\nimport { SoundSprite, SoundSpriteData, SoundSprites } from './SoundSprite';\nimport { resolveUrl } from './utils/resolveUrl';\nimport { WebAudioMedia } from './webaudio/WebAudioMedia';\n\n/**\n * Options to use for creating sounds.\n */\ninterface Options {\n    /**\n     * `true` to immediately start preloading.\n     * @default false\n     */\n    autoPlay?: boolean;\n    /**\n     * `true` to disallow playing multiple layered instances at once.\n     * @default false\n     */\n    singleInstance?: boolean;\n    /**\n     * The amount of volume 1 = 100%.\n     * @default 1\n     */\n    volume?: number;\n    /**\n     * The playback rate where 1 is 100% speed.\n     * @default 1\n     */\n    speed?: number;\n    /**\n     * Global complete callback when play is finished.\n     * @type {Function}\n     */\n    complete?: CompleteCallback;\n    /**\n     * Call when finished loading.\n     * @type {Function}\n     */\n    loaded?: LoadedCallback;\n    /**\n     * `true` to immediately start preloading if loading from `url`.\n     */\n    preload?: boolean;\n    /**\n     * Initial loop value, `true` is loop infinitely\n     * @default false\n     */\n    loop?: boolean;\n    /**\n     * The source of the file being loaded\n     */\n    url?: string;\n    /**\n     * If sound is already preloaded, available.\n     */\n    source?: ArrayBuffer | AudioBuffer | HTMLAudioElement;\n    /**\n     * The map of sprite data. Where a sprite is an object\n     * with a `start` and `end`, which are the times in seconds. Optionally, can include\n     * a `speed` amount where 1 is 100% speed.\n     */\n    sprites?: Record<string, SoundSpriteData>;\n}\n\n/**\n * Options used for sound playback.\n */\ninterface PlayOptions {\n    /**\n     * Start time offset in seconds.\n     * @default 0\n     */\n    start?: number;\n    /**\n     * End time in seconds.\n     */\n    end?: number;\n    /**\n     * Override default speed, default to the Sound's speed setting.\n     */\n    speed?: number;\n    /**\n    * Override default loop, default to the Sound's loop setting.\n    */\n    loop?: boolean;\n    /**\n     * Override default volume, default to the Sound's volume setting.\n     */\n    volume?: number;\n    /**\n     * The sprite to play.\n     */\n    sprite?: string;\n    /**\n     * If sound instance is muted by default.\n     * @default false\n     */\n    muted?: boolean;\n    /**\n     * Filters that apply to play.\n     * Only supported with WebAudio.\n     */\n    filters?: Filter[];\n    /**\n     * When completed.\n     * @type {Function}\n     */\n    complete?: CompleteCallback;\n    /**\n     * If not already preloaded, callback when finishes load.\n     * @type {Function}\n     */\n    loaded?: LoadedCallback;\n    /**\n     * Setting `true` will stop any playing instances. This is the same as\n     * the singleInstance property on Sound, but is play-specific.\n     */\n    singleInstance?: boolean;\n}\n\n/**\n * Callback when sound is loaded.\n * @ignore\n * @param {Error} err - The callback error.\n * @param {Sound} sound - The instance of new sound.\n * @param {IMediaInstance} instance - The instance of auto-played sound.\n */\ntype LoadedCallback = (err: Error, sound?: Sound, instance?: IMediaInstance) => void;\n\n/**\n * Callback when sound is completed.\n * @ignore\n * @param {Sound} sound - The instance of sound.\n */\ntype CompleteCallback = (sound: Sound) => void;\n\ntype SoundSpriteDataMap = Record<string, SoundSpriteData>;\n\n/**\n * Sound represents a single piece of loaded media. When playing a sound {@link IMediaInstance} objects\n * are created. Properties such a `volume`, `pause`, `mute`, `speed`, etc will have an effect on all instances.\n */\nclass Sound\n{\n    /** Pool of instances */\n    private static _pool: IMediaInstance[] = [];\n\n    /**\n     * `true` if the buffer is loaded.\n     * @default false\n     */\n    public isLoaded: boolean;\n\n    /**\n     * `true` if the sound is currently being played.\n     * @default false\n     * @readonly\n     */\n    public isPlaying: boolean;\n\n    /**\n     * true to start playing immediate after load.\n     * @default false\n     * @readonly\n     */\n    public autoPlay: boolean;\n\n    /**\n     * `true` to disallow playing multiple layered instances at once.\n     * @default false\n     */\n    public singleInstance: boolean;\n\n    /**\n     * `true` to immediately start preloading.\n     * @default false\n     * @readonly\n     */\n    public preload: boolean;\n\n    /**\n     * The file source to load.\n     * @readonly\n     */\n    public url: string;\n\n    /**\n     * The constructor options.\n     * @readonly\n     */\n    public options: Options;\n\n    /** The audio source */\n    public media: IMedia;\n\n    /** The collection of instances being played. */\n    private _instances: IMediaInstance[];\n\n    /** The user defined sound sprites. */\n    private _sprites: SoundSprites;\n\n    /** The options when auto-playing. */\n    private _autoPlayOptions: PlayOptions;\n\n    /** The internal volume. */\n    private _volume: number;\n\n    /** The internal paused state. */\n    private _paused: boolean;\n\n    /** The internal muted state. */\n    private _muted: boolean;\n\n    /** The internal volume. */\n    private _loop: boolean;\n\n    /** The internal playbackRate */\n    private _speed: number;\n\n    /**\n     * Create a new sound instance from source.\n     * @param source - Either the path or url to the source file.\n     *        or the object of options to use.\n     * @return Created sound instance.\n     */\n    public static from(source: string | Options | ArrayBuffer | HTMLAudioElement | AudioBuffer): Sound\n    {\n        let options: Options = {};\n\n        if (typeof source === 'string')\n        {\n            options.url = source as string;\n        }\n        else if (source instanceof ArrayBuffer || source instanceof AudioBuffer || source instanceof HTMLAudioElement)\n        {\n            options.source = source;\n        }\n        else\n        {\n            options = source;\n        }\n\n        // Default settings\n        options = {\n            autoPlay: false,\n            singleInstance: false,\n            url: null,\n            source: null,\n            preload: false,\n            volume: 1,\n            speed: 1,\n            complete: null,\n            loaded: null,\n            loop: false, ...options };\n\n        // Resolve url in-case it has a special format\n        if (options.url)\n        {\n            options.url = resolveUrl(options.url);\n        }\n\n        Object.freeze(options);\n\n        const media: IMedia = getInstance().useLegacy\n            ? new HTMLAudioMedia()\n            : new WebAudioMedia();\n\n        return new Sound(media, options);\n    }\n\n    /**\n     * Use `Sound.from`\n     * @ignore\n     */\n    constructor(media: IMedia, options: Options)\n    {\n        this.media = media;\n        this.options = options;\n        this._instances = [];\n        this._sprites = {};\n\n        this.media.init(this);\n\n        const complete = options.complete;\n\n        this._autoPlayOptions = complete ? { complete } : null;\n        this.isLoaded = false;\n        this.isPlaying = false;\n        this.autoPlay = options.autoPlay;\n        this.singleInstance = options.singleInstance;\n        this.preload = options.preload || this.autoPlay;\n        this.url = options.url;\n        this.speed = options.speed;\n        this.volume = options.volume;\n        this.loop = options.loop;\n\n        if (options.sprites)\n        {\n            this.addSprites(options.sprites);\n        }\n\n        if (this.preload)\n        {\n            this._preload(options.loaded);\n        }\n    }\n\n    /** Instance of the media context. */\n    public get context(): IMediaContext\n    {\n        return getInstance().context;\n    }\n\n    /** Stops all the instances of this sound from playing. */\n    public pause(): this\n    {\n        this.isPlaying = false;\n        this.paused = true;\n\n        return this;\n    }\n\n    /** Resuming all the instances of this sound from playing */\n    public resume(): this\n    {\n        this.isPlaying = this._instances.length > 0;\n        this.paused = false;\n\n        return this;\n    }\n\n    /** Stops all the instances of this sound from playing. */\n    public get paused(): boolean\n    {\n        return this._paused;\n    }\n    public set paused(paused: boolean)\n    {\n        this._paused = paused;\n        this.refreshPaused();\n    }\n\n    /** The playback rate. */\n    public get speed(): number\n    {\n        return this._speed;\n    }\n    public set speed(speed: number)\n    {\n        this._speed = speed;\n        this.refresh();\n    }\n\n    /** Set the filters. Only supported with WebAudio. */\n    public get filters(): Filter[]\n    {\n        return this.media.filters;\n    }\n    public set filters(filters: Filter[])\n    {\n        this.media.filters = filters;\n    }\n\n    /**\n     * Add a sound sprite, which is a saved instance of a longer sound.\n     * Similar to an image spritesheet.\n     * @param alias - The unique name of the sound sprite.\n     * @param data - Either completed function or play options.\n     */\n    public addSprites(alias: string, data: SoundSpriteData): SoundSprite;\n\n    /**\n     * Convenience method to add more than one sprite add a time.\n     * @param data - Map of sounds to add where the key is the alias,\n     *        and the data are configuration options.\n     * @return The map of sound sprites added.\n     */\n    public addSprites(data: SoundSpriteDataMap): SoundSprites;\n\n    /**\n     * @ignore\n     */\n    public addSprites(source: string | SoundSpriteDataMap, data?: SoundSpriteData): any\n    {\n        if (typeof source === 'object')\n        {\n            const results: SoundSprites = {};\n\n            for (const alias in source)\n            {\n                results[alias] = this.addSprites(alias, source[alias]);\n            }\n\n            return results;\n        }\n\n        // eslint-disable-next-line no-console\n        console.assert(!this._sprites[source], `Alias ${source} is already taken`);\n        const sprite = new SoundSprite(this, data);\n\n        this._sprites[source] = sprite;\n\n        return sprite;\n    }\n\n    /** Destructor, safer to use `SoundLibrary.remove(alias)` to remove this sound. */\n    public destroy(): void\n    {\n        this._removeInstances();\n        this.removeSprites();\n        this.media.destroy();\n        this.media = null;\n        this._sprites = null;\n        this._instances = null;\n    }\n\n    /**\n     * Remove a sound sprite.\n     * @param alias - The unique name of the sound sprite, if alias is omitted, removes all sprites.\n     */\n    public removeSprites(alias?: string): Sound\n    {\n        if (!alias)\n        {\n            for (const name in this._sprites)\n            {\n                this.removeSprites(name);\n            }\n        }\n        else\n        {\n            const sprite: SoundSprite = this._sprites[alias];\n\n            if (sprite !== undefined)\n            {\n                sprite.destroy();\n                delete this._sprites[alias];\n            }\n        }\n\n        return this;\n    }\n\n    /** If the current sound is playable (loaded). */\n    public get isPlayable(): boolean\n    {\n        return this.isLoaded && this.media && this.media.isPlayable;\n    }\n\n    /** Stops all the instances of this sound from playing. */\n    public stop(): this\n    {\n        if (!this.isPlayable)\n        {\n            this.autoPlay = false;\n            this._autoPlayOptions = null;\n\n            return this;\n        }\n        this.isPlaying = false;\n\n        // Go in reverse order so we don't skip items\n        for (let i = this._instances.length - 1; i >= 0; i--)\n        {\n            this._instances[i].stop();\n        }\n\n        return this;\n    }\n\n    /**\n     * Play a sound sprite, which is a saved instance of a longer sound.\n     * Similar to an image spritesheet.\n     * @method play\n     * @instance\n     * @param alias - The unique name of the sound sprite.\n     * @param {Function} callback - Callback when completed.\n     * @return The sound instance,\n     *        this cannot be reused after it is done playing. Returns a Promise if the sound\n     *        has not yet loaded.\n     */\n    public play(alias: string, callback?: CompleteCallback): IMediaInstance | Promise<IMediaInstance>;\n\n    /**\n     * Plays the sound.\n     * @method play\n     * @instance\n     * @param {Function|PlayOptions} source - Either completed function or play options.\n     * @param {Function} callback - Callback when completed.\n     * @return The sound instance,\n     *        this cannot be reused after it is done playing. Returns a Promise if the sound\n     *        has not yet loaded.\n     */\n    public play(source?: string | PlayOptions | CompleteCallback,\n                callback?: CompleteCallback): IMediaInstance | Promise<IMediaInstance>;\n\n    // Overloaded function\n    public play(source?: string | PlayOptions | CompleteCallback,\n        complete?: CompleteCallback): IMediaInstance | Promise<IMediaInstance>\n    {\n        let options: PlayOptions;\n\n        if (typeof source === 'string')\n        {\n            const sprite: string = source as string;\n\n            options = { sprite, loop: this.loop, complete };\n        }\n        else if (typeof source === 'function')\n        {\n            options = {};\n            options.complete = source as CompleteCallback;\n        }\n        else\n        {\n            options = source as PlayOptions;\n        }\n\n        options = {\n            complete: null,\n            loaded: null,\n            sprite: null,\n            end: null,\n            start: 0,\n            volume: 1,\n            speed: 1,\n            muted: false,\n            loop: false, ...(options || {}) };\n\n        // A sprite is specified, add the options\n        if (options.sprite)\n        {\n            const alias: string = options.sprite;\n\n            // eslint-disable-next-line no-console\n            console.assert(!!this._sprites[alias], `Alias ${alias} is not available`);\n            const sprite: SoundSprite = this._sprites[alias];\n\n            options.start = sprite.start + (options.start || 0);\n            options.end = sprite.end;\n            options.speed = sprite.speed || 1;\n            options.loop = sprite.loop || options.loop;\n            delete options.sprite;\n        }\n\n        // @deprecated offset option\n        if ((options as any).offset)\n        {\n            options.start = (options as any).offset as number;\n        }\n\n        // if not yet playable, ignore\n        // - usefull when the sound download isnt yet completed\n        if (!this.isLoaded)\n        {\n            return new Promise<IMediaInstance>((resolve, reject) =>\n            {\n                this.autoPlay = true;\n                this._autoPlayOptions = options;\n                this._preload((err: Error, sound: Sound, media: IMediaInstance) =>\n                {\n                    if (err)\n                    {\n                        reject(err);\n                    }\n                    else\n                    {\n                        if (options.loaded)\n                        {\n                            options.loaded(err, sound, media);\n                        }\n                        resolve(media);\n                    }\n                });\n            });\n        }\n\n        // Stop all sounds\n        if (this.singleInstance || options.singleInstance)\n        {\n            this._removeInstances();\n        }\n\n        // clone the bufferSource\n        const instance = this._createInstance();\n\n        this._instances.push(instance);\n        this.isPlaying = true;\n        instance.once('end', () =>\n        {\n            if (options.complete)\n            {\n                options.complete(this);\n            }\n            this._onComplete(instance);\n        });\n        instance.once('stop', () =>\n        {\n            this._onComplete(instance);\n        });\n\n        instance.play(options);\n\n        return instance;\n    }\n\n    /** Internal only, speed, loop, volume change occured. */\n    public refresh(): void\n    {\n        const len = this._instances.length;\n\n        for (let i = 0; i < len; i++)\n        {\n            this._instances[i].refresh();\n        }\n    }\n\n    /** Handle changes in paused state. Internal only. */\n    public refreshPaused(): void\n    {\n        const len = this._instances.length;\n\n        for (let i = 0; i < len; i++)\n        {\n            this._instances[i].refreshPaused();\n        }\n    }\n\n    /** Gets and sets the volume. */\n    public get volume(): number\n    {\n        return this._volume;\n    }\n    public set volume(volume: number)\n    {\n        this._volume = volume;\n        this.refresh();\n    }\n\n    /** Gets and sets the muted flag. */\n    public get muted(): boolean\n    {\n        return this._muted;\n    }\n    public set muted(muted: boolean)\n    {\n        this._muted = muted;\n        this.refresh();\n    }\n\n    /** Gets and sets the looping. */\n    public get loop(): boolean\n    {\n        return this._loop;\n    }\n    public set loop(loop: boolean)\n    {\n        this._loop = loop;\n        this.refresh();\n    }\n\n    /** Starts the preloading of sound. */\n    private _preload(callback?: LoadedCallback): void\n    {\n        this.media.load(callback);\n    }\n\n    /** Gets the list of instances that are currently being played of this sound. */\n    public get instances(): IMediaInstance[]\n    {\n        return this._instances;\n    }\n\n    /** Get the map of sprites. */\n    public get sprites(): SoundSprites\n    {\n        return this._sprites;\n    }\n\n    /** Get the duration of the audio in seconds. */\n    public get duration(): number\n    {\n        return this.media.duration;\n    }\n\n    /** Auto play the first instance. */\n    public autoPlayStart(): IMediaInstance\n    {\n        let instance: IMediaInstance;\n\n        if (this.autoPlay)\n        {\n            instance = this.play(this._autoPlayOptions) as IMediaInstance;\n        }\n\n        return instance;\n    }\n\n    /** Removes all instances. */\n    private _removeInstances(): void\n    {\n        // destroying also stops\n        for (let i = this._instances.length - 1; i >= 0; i--)\n        {\n            this._poolInstance(this._instances[i]);\n        }\n        this._instances.length = 0;\n    }\n\n    /**\n     * Sound instance completed.\n     * @param instance\n     */\n    private _onComplete(instance: IMediaInstance): void\n    {\n        if (this._instances)\n        {\n            const index = this._instances.indexOf(instance);\n\n            if (index > -1)\n            {\n                this._instances.splice(index, 1);\n            }\n            this.isPlaying = this._instances.length > 0;\n        }\n        this._poolInstance(instance);\n    }\n\n    /** Create a new instance. */\n    private _createInstance(): IMediaInstance\n    {\n        if (Sound._pool.length > 0)\n        {\n            const instance: IMediaInstance = Sound._pool.pop();\n\n            instance.init(this.media);\n\n            return instance;\n        }\n\n        return this.media.create();\n    }\n\n    /**\n     * Destroy/recycling the instance object.\n     * @param instance - Instance to recycle\n     */\n    private _poolInstance(instance: IMediaInstance): void\n    {\n        instance.destroy();\n        // Add it if it isn't already added\n        if (Sound._pool.indexOf(instance) < 0)\n        {\n            Sound._pool.push(instance);\n        }\n    }\n}\n\nexport { Sound };\nexport type {\n    Options,\n    PlayOptions,\n    LoadedCallback,\n    CompleteCallback,\n    SoundSpriteDataMap\n};\n","import { EventEmitter } from '@pixi/utils';\nimport { Filter } from '../filters/Filter';\nimport { IMediaContext } from '../interfaces/IMediaContext';\n\n/**\n * The fallback version of WebAudioContext which uses `<audio>` instead of WebAudio API.\n * @memberof htmlaudio\n * @extends PIXI.util.EventEmitter\n */\nclass HTMLAudioContext extends EventEmitter implements IMediaContext\n{\n    /** Current global speed from 0 to 1 */\n    public speed = 1;\n\n    /** Current muted status of the context */\n    public muted = false;\n\n    /** Current volume from 0 to 1  */\n    public volume = 1;\n\n    /** Current paused status */\n    public paused = false;\n\n    /** Internal trigger when volume, mute or speed changes */\n    public refresh(): void\n    {\n        this.emit('refresh');\n    }\n\n    /** Internal trigger paused changes */\n    public refreshPaused(): void\n    {\n        this.emit('refreshPaused');\n    }\n\n    /**\n     * HTML Audio does not support filters, this is non-functional API.\n     */\n    public get filters(): Filter[]\n    {\n        console.warn('HTML Audio does not support filters');\n\n        return null;\n    }\n    public set filters(_filters: Filter[])\n    {\n        console.warn('HTML Audio does not support filters');\n    }\n\n    /**\n     * HTML Audio does not support `audioContext`\n     * @readonly\n     * @type {AudioContext}\n     */\n    public get audioContext(): AudioContext\n    {\n        console.warn('HTML Audio does not support audioContext');\n\n        return null;\n    }\n\n    /**\n     * Toggles the muted state.\n     * @return The current muted state.\n     */\n    public toggleMute(): boolean\n    {\n        this.muted = !this.muted;\n        this.refresh();\n\n        return this.muted;\n    }\n\n    /**\n     * Toggles the paused state.\n     * @return The current paused state.\n     */\n    public togglePause(): boolean\n    {\n        this.paused = !this.paused;\n        this.refreshPaused();\n\n        return this.paused;\n    }\n\n    /** Destroy and don't use after this */\n    public destroy(): void\n    {\n        this.removeAllListeners();\n    }\n}\n\nexport { HTMLAudioContext };\n","import { EventEmitter } from '@pixi/utils';\nimport { Filterable } from '../Filterable';\nimport { IMediaContext } from '../interfaces';\n\n/**\n * Main class to handle WebAudio API. There's a simple chain\n * of AudioNode elements: analyser > compressor > context.destination.\n * any filters that are added are inserted between the analyser and compressor nodes\n * @memberof webaudio\n */\nclass WebAudioContext extends Filterable implements IMediaContext\n{\n    /**\n     * Context Compressor node\n     * @readonly\n     */\n    public compressor: DynamicsCompressorNode;\n\n    /**\n     * Context Analyser node\n     * @readonly\n     */\n    public analyser: AnalyserNode;\n\n    /**\n     * Global speed of all sounds\n     * @readonly\n     */\n    public speed: number;\n\n    /**\n     * Sets the muted state.\n     * @default false\n     */\n    public muted: boolean;\n\n    /**\n     * Sets the volume from 0 to 1.\n     * @default 1\n     */\n    public volume: number;\n\n    /**\n     * Handle global events\n     * @type {PIXI.utils.EventEmitter}\n     */\n    public events: EventEmitter;\n\n    /** The instance of the AudioContext for WebAudio API. */\n    private _ctx: AudioContext;\n\n    /** The instance of the OfflineAudioContext for fast decoding audio. */\n    private _offlineCtx: OfflineAudioContext;\n\n    /** Current paused status */\n    private _paused: boolean;\n\n    /**\n     * Indicated whether audio on iOS has been unlocked, which requires a touchend/mousedown event that plays an\n     * empty sound.\n     */\n    private _unlocked: boolean;\n\n    constructor()\n    {\n        const win: any = window as any;\n        const ctx = new WebAudioContext.AudioContext();\n        const compressor: DynamicsCompressorNode = ctx.createDynamicsCompressor();\n        const analyser: AnalyserNode = ctx.createAnalyser();\n\n        // setup the end of the node chain\n        analyser.connect(compressor);\n        compressor.connect(ctx.destination);\n\n        super(analyser, compressor);\n\n        this._ctx = ctx;\n        // ios11 safari's webkitOfflineAudioContext allows only 44100 Hz sample rate\n        //\n        // For the sample rate value passed to OfflineAudioContext constructor,\n        // all browsers are required to support a range of 8000 to 96000.\n        // Reference:\n        // https://www.w3.org/TR/webaudio/#dom-offlineaudiocontext-offlineaudiocontext-numberofchannels-length-samplerate\n        this._offlineCtx = new WebAudioContext.OfflineAudioContext(1, 2,\n            (win.OfflineAudioContext) ? Math.max(8000, Math.min(96000, ctx.sampleRate)) : 44100);\n        this._unlocked = false;\n\n        this.compressor = compressor;\n        this.analyser = analyser;\n        this.events = new EventEmitter();\n\n        // Set the defaults\n        this.volume = 1;\n        this.speed = 1;\n        this.muted = false;\n        this.paused = false;\n\n        // Listen for document level clicks to unlock WebAudio. See the _unlock method.\n        if (ctx.state !== 'running')\n        {\n            this._unlock(); // When played inside of a touch event, this will enable audio on iOS immediately.\n            this._unlock = this._unlock.bind(this);\n            document.addEventListener('mousedown', this._unlock, true);\n            document.addEventListener('touchstart', this._unlock, true);\n            document.addEventListener('touchend', this._unlock, true);\n        }\n    }\n\n    /**\n     * Try to unlock audio on iOS. This is triggered from either WebAudio plugin setup (which will work if inside of\n     * a `mousedown` or `touchend` event stack), or the first document touchend/mousedown event. If it fails (touchend\n     * will fail if the user presses for too long, indicating a scroll event instead of a click event.\n     *\n     * Note that earlier versions of iOS supported `touchstart` for this, but iOS9 removed this functionality. Adding\n     * a `touchstart` event to support older platforms may preclude a `mousedown` even from getting fired on iOS9, so we\n     * stick with `mousedown` and `touchend`.\n     */\n    private _unlock(): void\n    {\n        if (this._unlocked)\n        {\n            return;\n        }\n        this.playEmptySound();\n        if (this._ctx.state === 'running')\n        {\n            document.removeEventListener('mousedown', this._unlock, true);\n            document.removeEventListener('touchend', this._unlock, true);\n            document.removeEventListener('touchstart', this._unlock, true);\n            this._unlocked = true;\n        }\n    }\n\n    /**\n     * Plays an empty sound in the web audio context.  This is used to enable web audio on iOS devices, as they\n     * require the first sound to be played inside of a user initiated event (touch/click).\n     */\n    public playEmptySound(): void\n    {\n        const source = this._ctx.createBufferSource();\n\n        source.buffer = this._ctx.createBuffer(1, 1, 22050);\n        source.connect(this._ctx.destination);\n        source.start(0, 0, 0);\n        if (source.context.state === 'suspended')\n        {\n            (source.context as AudioContext).resume();\n        }\n    }\n\n    /**\n     * Get AudioContext class, if not supported returns `null`\n     * @type {AudioContext}\n     * @readonly\n     */\n    public static get AudioContext(): typeof AudioContext\n    {\n        const win: any = window as any;\n\n        return (\n            win.AudioContext\n            || win.webkitAudioContext\n            || null\n        );\n    }\n\n    /**\n     * Get OfflineAudioContext class, if not supported returns `null`\n     * @type {OfflineAudioContext}\n     * @readonly\n     */\n    public static get OfflineAudioContext(): typeof OfflineAudioContext\n    {\n        const win: any = window as any;\n\n        return (\n            win.OfflineAudioContext\n            || win.webkitOfflineAudioContext\n            || null\n        );\n    }\n\n    /** Destroy this context. */\n    public destroy(): void\n    {\n        super.destroy();\n\n        const ctx: any = this._ctx as any;\n        // check if browser supports AudioContext.close()\n\n        if (typeof ctx.close !== 'undefined')\n        {\n            ctx.close();\n        }\n        this.events.removeAllListeners();\n        this.analyser.disconnect();\n        this.compressor.disconnect();\n        this.analyser = null;\n        this.compressor = null;\n        this.events = null;\n        this._offlineCtx = null;\n        this._ctx = null;\n    }\n\n    /**\n     * The WebAudio API AudioContext object.\n     * @readonly\n     * @type {AudioContext}\n     */\n    public get audioContext(): AudioContext\n    {\n        return this._ctx;\n    }\n\n    /**\n     * The WebAudio API OfflineAudioContext object.\n     * @readonly\n     * @type {OfflineAudioContext}\n     */\n    public get offlineContext(): OfflineAudioContext\n    {\n        return this._offlineCtx;\n    }\n\n    /**\n     * Pauses all sounds, even though we handle this at the instance\n     * level, we'll also pause the audioContext so that the\n     * time used to compute progress isn't messed up.\n     * @default false\n     */\n    public set paused(paused: boolean)\n    {\n        if (paused && this._ctx.state === 'running')\n        {\n            (this._ctx as any).suspend();\n        }\n        else if (!paused && this._ctx.state === 'suspended')\n        {\n            (this._ctx as any).resume();\n        }\n        this._paused = paused;\n    }\n    public get paused(): boolean\n    {\n        return this._paused;\n    }\n\n    /** Emit event when muted, volume or speed changes */\n    public refresh(): void\n    {\n        this.events.emit('refresh');\n    }\n\n    /** Emit event when muted, volume or speed changes */\n    public refreshPaused(): void\n    {\n        this.events.emit('refreshPaused');\n    }\n\n    /**\n     * Toggles the muted state.\n     * @return The current muted state.\n     */\n    public toggleMute(): boolean\n    {\n        this.muted = !this.muted;\n        this.refresh();\n\n        return this.muted;\n    }\n\n    /**\n     * Toggles the paused state.\n     * @return The current muted state.\n     */\n    public togglePause(): boolean\n    {\n        this.paused = !this.paused;\n        this.refreshPaused();\n\n        return this._paused;\n    }\n\n    /**\n     * Decode the audio data\n     * @param arrayBuffer - Buffer from loader\n     * @param callback - When completed, error and audioBuffer are parameters.\n     */\n    public decode(arrayBuffer: ArrayBuffer, callback: (err?: Error, buffer?: AudioBuffer) => void): void\n    {\n        const handleError = (err: Error) =>\n        {\n            callback(new Error(err?.message || 'Unable to decode file'));\n        };\n        const result = this._offlineCtx.decodeAudioData(\n            arrayBuffer, (buffer: AudioBuffer) =>\n            {\n                callback(null, buffer);\n            },\n            handleError,\n        );\n        // Reference: https://developer.mozilla.org/en-US/docs/Web/API/BaseAudioContext/decodeAudioData\n        // decodeAudioData return value: Void, or a Promise object that fulfills with the decodedData.\n\n        if (result)\n        {\n            result.catch(handleError);\n        }\n    }\n}\n\nexport { WebAudioContext };\n","import { Filter } from './filters/Filter';\nimport { IMediaContext } from './interfaces/IMediaContext';\nimport { IMediaInstance } from './interfaces/IMediaInstance';\nimport { SoundLoader } from './SoundLoader';\nimport { CompleteCallback, Options, PlayOptions, Sound } from './Sound';\nimport { HTMLAudioContext } from './htmlaudio/HTMLAudioContext';\nimport { WebAudioContext } from './webaudio/WebAudioContext';\n\ntype SoundSourceMap = Record<string, Options | string | ArrayBuffer | AudioBuffer | HTMLAudioElement>;\ntype SoundMap = Record<string, Sound>;\n\n/**\n * Manages the playback of sounds. This is the main class for PixiJS Sound. If you're\n * using the browser-based bundled this is `PIXI.sound`. Otherwise, you can do this:\n * @example\n * import { sound } from '@pixi/sound';\n *\n * // sound is an instance of SoundLibrary\n * sound.add('my-sound', 'path/to/file.mp3');\n * sound.play('my-sound');\n */\nclass SoundLibrary\n{\n    /**\n     * For legacy approach for Audio. Instead of using WebAudio API\n     * for playback of sounds, it will use HTML5 `<audio>` element.\n     */\n    private _useLegacy: boolean;\n\n    /** The global context to use. */\n    private _context: IMediaContext;\n\n    /** The WebAudio specific context */\n    private _webAudioContext: WebAudioContext;\n\n    /** The HTML Audio (legacy) context. */\n    private _htmlAudioContext: HTMLAudioContext;\n\n    /** The map of all sounds by alias. */\n    private _sounds: SoundMap;\n\n    constructor()\n    {\n        this.init();\n    }\n\n    /**\n     * Re-initialize the sound library, this will\n     * recreate the AudioContext. If there's a hardware-failure\n     * call `close` and then `init`.\n     * @return Sound instance\n     */\n    public init(): this\n    {\n        if (this.supported)\n        {\n            this._webAudioContext = new WebAudioContext();\n        }\n        this._htmlAudioContext = new HTMLAudioContext();\n        this._sounds = {};\n        this.useLegacy = !this.supported;\n\n        return this;\n    }\n\n    /**\n     * The global context to use.\n     * @readonly\n     */\n    public get context(): IMediaContext\n    {\n        return this._context;\n    }\n\n    /**\n     * Apply filters to all sounds. Can be useful\n     * for setting global planning or global effects.\n     * **Only supported with WebAudio.**\n     * @example\n     * import { sound, filters } from '@pixi/sound';\n     * // Adds a filter to pan all output left\n     * sound.filtersAll = [\n     *     new filters.StereoFilter(-1)\n     * ];\n     */\n    public get filtersAll(): Filter[]\n    {\n        if (!this.useLegacy)\n        {\n            return this._context.filters;\n        }\n\n        return [];\n    }\n    public set filtersAll(filtersAll: Filter[])\n    {\n        if (!this.useLegacy)\n        {\n            this._context.filters = filtersAll;\n        }\n    }\n\n    /**\n     * `true` if WebAudio is supported on the current browser.\n     */\n    public get supported(): boolean\n    {\n        return WebAudioContext.AudioContext !== null;\n    }\n\n    /**\n     * Register an existing sound with the library cache.\n     * @method add\n     * @instance\n     * @param {string} alias - The sound alias reference.\n     * @param {Sound} sound - Sound reference to use.\n     * @return {Sound} Instance of the Sound object.\n     */\n\n    /**\n     * Adds a new sound by alias.\n     * @param alias - The sound alias reference.\n     * @param {ArrayBuffer|AudioBuffer|String|Options|HTMLAudioElement} options - Either the path or url to the source file.\n     *        or the object of options to use.\n     * @return Instance of the Sound object.\n     */\n    public add(alias: string, options: Options | string | ArrayBuffer | AudioBuffer | HTMLAudioElement | Sound): Sound;\n\n    /**\n     * Adds multiple sounds at once.\n     * @param map - Map of sounds to add, the key is the alias, the value is the\n     *        `string`, `ArrayBuffer`, `AudioBuffer`, `HTMLAudioElement` or the list of options\n     *        (see {@link Options} for full options).\n     * @param globalOptions - The default options for all sounds.\n     *        if a property is defined, it will use the local property instead.\n     * @return Instance to the Sound object.\n     */\n    public add(map: SoundSourceMap, globalOptions?: Options): SoundMap;\n\n    /**\n     * @ignore\n     */\n    public add(source: string | SoundSourceMap,\n        sourceOptions?: Options | string | ArrayBuffer | AudioBuffer | HTMLAudioElement | Sound): any\n    {\n        if (typeof source === 'object')\n        {\n            const results: SoundMap = {};\n\n            for (const alias in source)\n            {\n                const options: Options = this._getOptions(\n                    source[alias],\n                    sourceOptions as Options,\n                );\n\n                results[alias] = this.add(alias, options);\n            }\n\n            return results;\n        }\n\n        // eslint-disable-next-line no-console\n        console.assert(!this._sounds[source], `Sound with alias ${source} already exists.`);\n\n        if (sourceOptions instanceof Sound)\n        {\n            this._sounds[source] = sourceOptions;\n\n            return sourceOptions;\n        }\n\n        const options: Options = this._getOptions(sourceOptions);\n        const sound: Sound = Sound.from(options);\n\n        this._sounds[source] = sound;\n\n        return sound;\n    }\n\n    /**\n     * Internal methods for getting the options object\n     * @private\n     * @param source - The source options\n     * @param overrides - Override default options\n     * @return The construction options\n     */\n    private _getOptions(source: string | ArrayBuffer | AudioBuffer | HTMLAudioElement | Options,\n        overrides?: Options): Options\n    {\n        let options: Options;\n\n        if (typeof source === 'string')\n        {\n            options = { url: source };\n        }\n        else if (source instanceof ArrayBuffer || source instanceof AudioBuffer || source instanceof HTMLAudioElement)\n        {\n            options = { source };\n        }\n        else\n        {\n            options = source as Options;\n        }\n        options = { ...options, ...(overrides || {}) };\n\n        return options;\n    }\n\n    /**\n     * Do not use WebAudio, force the use of legacy. This **must** be called before loading any files.\n     */\n    public get useLegacy(): boolean\n    {\n        return this._useLegacy;\n    }\n    public set useLegacy(legacy: boolean)\n    {\n        SoundLoader.setLegacy(legacy);\n        this._useLegacy = legacy;\n\n        // Set the context to use\n        this._context = (!legacy && this.supported)\n            ? this._webAudioContext\n            : this._htmlAudioContext;\n    }\n\n    /**\n     * Removes a sound by alias.\n     * @param alias - The sound alias reference.\n     * @return Instance for chaining.\n     */\n    public remove(alias: string): this\n    {\n        this.exists(alias, true);\n        this._sounds[alias].destroy();\n        delete this._sounds[alias];\n\n        return this;\n    }\n\n    /**\n     * Set the global volume for all sounds. To set per-sound volume see {@link SoundLibrary#volume}.\n     */\n    public get volumeAll(): number\n    {\n        return this._context.volume;\n    }\n    public set volumeAll(volume: number)\n    {\n        this._context.volume = volume;\n        this._context.refresh();\n    }\n\n    /**\n     * Set the global speed for all sounds. To set per-sound speed see {@link SoundLibrary#speed}.\n     */\n    public get speedAll(): number\n    {\n        return this._context.speed;\n    }\n    public set speedAll(speed: number)\n    {\n        this._context.speed = speed;\n        this._context.refresh();\n    }\n\n    /**\n     * Toggle paused property for all sounds.\n     * @return `true` if all sounds are paused.\n     */\n    public togglePauseAll(): boolean\n    {\n        return this._context.togglePause();\n    }\n\n    /**\n     * Pauses any playing sounds.\n     * @return Instance for chaining.\n     */\n    public pauseAll(): this\n    {\n        this._context.paused = true;\n        this._context.refreshPaused();\n\n        return this;\n    }\n\n    /**\n     * Resumes any sounds.\n     * @return Instance for chaining.\n     */\n    public resumeAll(): this\n    {\n        this._context.paused = false;\n        this._context.refreshPaused();\n\n        return this;\n    }\n\n    /**\n     * Toggle muted property for all sounds.\n     * @return `true` if all sounds are muted.\n     */\n    public toggleMuteAll(): boolean\n    {\n        return this._context.toggleMute();\n    }\n\n    /**\n     * Mutes all playing sounds.\n     * @return Instance for chaining.\n     */\n    public muteAll(): this\n    {\n        this._context.muted = true;\n        this._context.refresh();\n\n        return this;\n    }\n\n    /**\n     * Unmutes all playing sounds.\n     * @return Instance for chaining.\n     */\n    public unmuteAll(): this\n    {\n        this._context.muted = false;\n        this._context.refresh();\n\n        return this;\n    }\n\n    /**\n     * Stops and removes all sounds. They cannot be used after this.\n     * @return Instance for chaining.\n     */\n    public removeAll(): this\n    {\n        for (const alias in this._sounds)\n        {\n            this._sounds[alias].destroy();\n            delete this._sounds[alias];\n        }\n\n        return this;\n    }\n\n    /**\n     * Stops all sounds.\n     * @return Instance for chaining.\n     */\n    public stopAll(): this\n    {\n        for (const alias in this._sounds)\n        {\n            this._sounds[alias].stop();\n        }\n\n        return this;\n    }\n\n    /**\n     * Checks if a sound by alias exists.\n     * @param alias - Check for alias.\n     * @param assert - Whether enable console.assert.\n     * @return true if the sound exists.\n     */\n    public exists(alias: string, assert = false): boolean\n    {\n        const exists = !!this._sounds[alias];\n\n        if (assert)\n        {\n            // eslint-disable-next-line no-console\n            console.assert(exists, `No sound matching alias '${alias}'.`);\n        }\n\n        return exists;\n    }\n\n    /**\n     * Find a sound by alias.\n     * @param alias - The sound alias reference.\n     * @return Sound object.\n     */\n    public find(alias: string): Sound\n    {\n        this.exists(alias, true);\n\n        return this._sounds[alias];\n    }\n\n    /**\n     * Plays a sound.\n     * @method play\n     * @instance\n     * @param {string} alias - The sound alias reference.\n     * @param {string} sprite - The alias of the sprite to play.\n     * @return {IMediaInstance|null} The sound instance, this cannot be reused\n     *         after it is done playing. Returns `null` if the sound has not yet loaded.\n     */\n\n    /**\n     * Plays a sound.\n     * @param alias - The sound alias reference.\n     * @param {PlayOptions|Function} options - The options or callback when done.\n     * @return The sound instance,\n     *        this cannot be reused after it is done playing. Returns a Promise if the sound\n     *        has not yet loaded.\n     */\n    public play(\n        alias: string,\n        options?: PlayOptions | CompleteCallback | string): IMediaInstance | Promise<IMediaInstance>\n    {\n        return this.find(alias).play(options);\n    }\n\n    /**\n     * Stops a sound.\n     * @param alias - The sound alias reference.\n     * @return Sound object.\n     */\n    public stop(alias: string): Sound\n    {\n        return this.find(alias).stop();\n    }\n\n    /**\n     * Pauses a sound.\n     * @param alias - The sound alias reference.\n     * @return Sound object.\n     */\n    public pause(alias: string): Sound\n    {\n        return this.find(alias).pause();\n    }\n\n    /**\n     * Resumes a sound.\n     * @param alias - The sound alias reference.\n     * @return Instance for chaining.\n     */\n    public resume(alias: string): Sound\n    {\n        return this.find(alias).resume();\n    }\n\n    /**\n     * Get or set the volume for a sound.\n     * @param alias - The sound alias reference.\n     * @param volume - Optional current volume to set.\n     * @return The current volume.\n     */\n    public volume(alias: string, volume?: number): number\n    {\n        const sound = this.find(alias);\n\n        if (volume !== undefined)\n        {\n            sound.volume = volume;\n        }\n\n        return sound.volume;\n    }\n\n    /**\n     * Get or set the speed for a sound.\n     * @param alias - The sound alias reference.\n     * @param speed - Optional current speed to set.\n     * @return The current speed.\n     */\n    public speed(alias: string, speed?: number): number\n    {\n        const sound = this.find(alias);\n\n        if (speed !== undefined)\n        {\n            sound.speed = speed;\n        }\n\n        return sound.speed;\n    }\n\n    /**\n     * Get the length of a sound in seconds.\n     * @param alias - The sound alias reference.\n     * @return The current duration in seconds.\n     */\n    public duration(alias: string): number\n    {\n        return this.find(alias).duration;\n    }\n\n    /**\n     * Closes the sound library. This will release/destroy\n     * the AudioContext(s). Can be used safely if you want to\n     * initialize the sound library later. Use `init` method.\n     */\n    public close(): this\n    {\n        this.removeAll();\n        this._sounds = null;\n        if (this._webAudioContext)\n        {\n            this._webAudioContext.destroy();\n            this._webAudioContext = null;\n        }\n        if (this._htmlAudioContext)\n        {\n            this._htmlAudioContext.destroy();\n            this._htmlAudioContext = null;\n        }\n        this._context = null;\n\n        return this;\n    }\n}\n\nexport { SoundLibrary };\nexport type { SoundSourceMap, SoundMap };\n","/**\n * Classes supporting non-WebAudio based browsers.\n * @namespace htmlaudio\n */\nexport * from './HTMLAudioMedia';\nexport * from './HTMLAudioInstance';\nexport * from './HTMLAudioContext';\n","/**\n * Represents a single sound element. Can be used to play, pause, etc. sound instances.\n *\n * @memberof filters\n */\nclass Filter\n{\n    /** The node to connect for the filter to the previous filter. */\n    public destination: AudioNode;\n\n    /** The node to connect for the filter to the previous filter. */\n    public source: AudioNode;\n\n    /**\n     * @param {AudioNode} destination - The audio node to use as the destination for the input AudioNode\n     * @param {AudioNode} [source] - Optional output node, defaults to destination node. This is useful\n     *        when creating filters which contains multiple AudioNode elements chained together.\n     */\n    constructor(destination: AudioNode, source?: AudioNode)\n    {\n        this.init(destination, source);\n    }\n\n    /** Reinitialize */\n    protected init(destination: AudioNode, source?: AudioNode): void\n    {\n        this.destination = destination;\n        this.source = source || destination;\n    }\n\n    /**\n     * Connect to the destination.\n     * @param {AudioNode} destination - The destination node to connect the output to\n     */\n    public connect(destination: AudioNode): void\n    {\n        this.source.connect(destination);\n    }\n\n    /** Completely disconnect filter from destination and source nodes. */\n    public disconnect(): void\n    {\n        this.source.disconnect();\n    }\n\n    /** Destroy the filter and don't use after this. */\n    public destroy(): void\n    {\n        this.disconnect();\n        this.destination = null;\n        this.source = null;\n    }\n}\n\nexport { Filter };\n","import { getInstance } from '../instance';\nimport { WebAudioUtils } from '../webaudio/WebAudioUtils';\nimport { Filter } from './Filter';\n\ninterface Band {\n    f: number;\n    type: string;\n    gain: number;\n}\n\n/**\n * Filter for adding equalizer bands.\n *\n * @memberof filters\n */\nclass EqualizerFilter extends Filter\n{\n    /**\n     * Band at 32 Hz\n     * @readonly\n     */\n    public static readonly F32: number = 32;\n\n    /**\n     * Band at 64 Hz\n     * @readonly\n     */\n    public static readonly F64: number = 64;\n\n    /**\n     * Band at 125 Hz\n     * @readonly\n     */\n    public static readonly F125: number = 125;\n\n    /**\n     * Band at 250 Hz\n     * @readonly\n     */\n    public static readonly F250: number = 250;\n\n    /**\n     * Band at 500 Hz\n     * @readonly\n     */\n    public static readonly F500: number = 500;\n\n    /**\n     * Band at 1000 Hz\n     * @readonly\n     */\n    public static readonly F1K: number = 1000;\n\n    /**\n     * Band at 2000 Hz\n     * @readonly\n     */\n    public static readonly F2K: number = 2000;\n\n    /**\n     * Band at 4000 Hz\n     * @readonly\n     */\n    public static readonly F4K: number = 4000;\n\n    /**\n     * Band at 8000 Hz\n     * @readonly\n     */\n    public static readonly F8K: number = 8000;\n\n    /**\n     * Band at 16000 Hz\n     * @readonly\n     */\n    public static readonly F16K: number = 16000;\n\n    /**\n     * The list of bands\n     * @readonly\n     */\n    public readonly bands: BiquadFilterNode[];\n\n    /**\n     * The map of bands to frequency\n     * @readonly\n     */\n    public readonly bandsMap: Record<number, BiquadFilterNode>;\n\n    /**\n     * @param f32 - Default gain for 32 Hz\n     * @param f64 - Default gain for 64 Hz\n     * @param f125 - Default gain for 125 Hz\n     * @param f250 - Default gain for 250 Hz\n     * @param f500 - Default gain for 500 Hz\n     * @param f1k - Default gain for 1000 Hz\n     * @param f2k - Default gain for 2000 Hz\n     * @param f4k - Default gain for 4000 Hz\n     * @param f8k - Default gain for 8000 Hz\n     * @param f16k - Default gain for 16000 Hz\n     */\n    constructor(f32 = 0, f64 = 0, f125 = 0, f250 = 0, f500 = 0,\n        f1k = 0, f2k = 0, f4k = 0, f8k = 0, f16k = 0)\n    {\n        if (getInstance().useLegacy)\n        {\n            super(null);\n\n            return;\n        }\n\n        const equalizerBands: Band[] = [\n            {\n                f: EqualizerFilter.F32,\n                type: 'lowshelf',\n                gain: f32,\n            },\n            {\n                f: EqualizerFilter.F64,\n                type: 'peaking',\n                gain: f64,\n            },\n            {\n                f: EqualizerFilter.F125,\n                type: 'peaking',\n                gain: f125,\n            },\n            {\n                f: EqualizerFilter.F250,\n                type: 'peaking',\n                gain: f250,\n            },\n            {\n                f: EqualizerFilter.F500,\n                type: 'peaking',\n                gain: f500,\n            },\n            {\n                f: EqualizerFilter.F1K,\n                type: 'peaking',\n                gain: f1k,\n            },\n            {\n                f: EqualizerFilter.F2K,\n                type: 'peaking',\n                gain: f2k,\n            },\n            {\n                f: EqualizerFilter.F4K,\n                type: 'peaking',\n                gain: f4k,\n            },\n            {\n                f: EqualizerFilter.F8K,\n                type: 'peaking',\n                gain: f8k,\n            },\n            {\n                f: EqualizerFilter.F16K,\n                type: 'highshelf',\n                gain: f16k,\n            },\n        ];\n\n        const bands: BiquadFilterNode[] = equalizerBands.map((band: Band) =>\n        {\n            const node: BiquadFilterNode = getInstance().context.audioContext.createBiquadFilter();\n\n            node.type = band.type as BiquadFilterType;\n            WebAudioUtils.setParamValue(node.Q, 1);\n            node.frequency.value = band.f; // WebAudioUtils.setParamValue(filter.frequency, band.f);\n            WebAudioUtils.setParamValue(node.gain, band.gain);\n\n            return node;\n        });\n\n        // Setup the constructor AudioNode, where first is the input, and last is the output\n        super(bands[0], bands[bands.length - 1]);\n\n        // Manipulate the bands\n        this.bands = bands;\n\n        // Create a map\n        this.bandsMap = {};\n\n        for (let i = 0; i < this.bands.length; i++)\n        {\n            const node: BiquadFilterNode = this.bands[i];\n\n            // Connect the previous band to the current one\n            if (i > 0)\n            {\n                this.bands[i - 1].connect(node);\n            }\n            this.bandsMap[node.frequency.value] = node;\n        }\n    }\n\n    /**\n     * Set gain on a specific frequency.\n     * @param frequency - The frequency, see EqualizerFilter.F* for bands\n     * @param gain - Recommended -40 to 40.\n     */\n    public setGain(frequency: number, gain = 0): void\n    {\n        if (!this.bandsMap[frequency])\n        {\n            throw new Error(`No band found for frequency ${frequency}`);\n        }\n        WebAudioUtils.setParamValue(this.bandsMap[frequency].gain, gain);\n    }\n\n    /**\n     * Get gain amount on a specific frequency.\n     * @return The amount of gain set.\n     */\n    public getGain(frequency: number): number\n    {\n        if (!this.bandsMap[frequency])\n        {\n            throw new Error(`No band found for frequency ${frequency}`);\n        }\n\n        return this.bandsMap[frequency].gain.value;\n    }\n\n    /**\n     * Gain at 32 Hz frequencey.\n     * @default 0\n     */\n    public set f32(value: number)\n    {\n        this.setGain(EqualizerFilter.F32, value);\n    }\n    public get f32(): number\n    {\n        return this.getGain(EqualizerFilter.F32);\n    }\n\n    /**\n     * Gain at 64 Hz frequencey.\n     * @default 0\n     */\n    public set f64(value: number)\n    {\n        this.setGain(EqualizerFilter.F64, value);\n    }\n    public get f64(): number\n    {\n        return this.getGain(EqualizerFilter.F64);\n    }\n\n    /**\n     * Gain at 125 Hz frequencey.\n     * @default 0\n     */\n    public set f125(value: number)\n    {\n        this.setGain(EqualizerFilter.F125, value);\n    }\n    public get f125(): number\n    {\n        return this.getGain(EqualizerFilter.F125);\n    }\n\n    /**\n     * Gain at 250 Hz frequencey.\n     * @default 0\n     */\n    public set f250(value: number)\n    {\n        this.setGain(EqualizerFilter.F250, value);\n    }\n    public get f250(): number\n    {\n        return this.getGain(EqualizerFilter.F250);\n    }\n\n    /**\n     * Gain at 500 Hz frequencey.\n     * @default 0\n     */\n    public set f500(value: number)\n    {\n        this.setGain(EqualizerFilter.F500, value);\n    }\n    public get f500(): number\n    {\n        return this.getGain(EqualizerFilter.F500);\n    }\n\n    /**\n     * Gain at 1 KHz frequencey.\n     * @default 0\n     */\n    public set f1k(value: number)\n    {\n        this.setGain(EqualizerFilter.F1K, value);\n    }\n    public get f1k(): number\n    {\n        return this.getGain(EqualizerFilter.F1K);\n    }\n\n    /**\n     * Gain at 2 KHz frequencey.\n     * @default 0\n     */\n    public set f2k(value: number)\n    {\n        this.setGain(EqualizerFilter.F2K, value);\n    }\n    public get f2k(): number\n    {\n        return this.getGain(EqualizerFilter.F2K);\n    }\n\n    /**\n     * Gain at 4 KHz frequencey.\n     * @default 0\n     */\n    public set f4k(value: number)\n    {\n        this.setGain(EqualizerFilter.F4K, value);\n    }\n    public get f4k(): number\n    {\n        return this.getGain(EqualizerFilter.F4K);\n    }\n\n    /**\n     * Gain at 8 KHz frequencey.\n     * @default 0\n     */\n    public set f8k(value: number)\n    {\n        this.setGain(EqualizerFilter.F8K, value);\n    }\n    public get f8k(): number\n    {\n        return this.getGain(EqualizerFilter.F8K);\n    }\n\n    /**\n     * Gain at 16 KHz frequencey.\n     * @default 0\n     */\n    public set f16k(value: number)\n    {\n        this.setGain(EqualizerFilter.F16K, value);\n    }\n    public get f16k(): number\n    {\n        return this.getGain(EqualizerFilter.F16K);\n    }\n\n    /** Reset all frequency bands to have gain of 0 */\n    public reset(): void\n    {\n        this.bands.forEach((band: BiquadFilterNode) =>\n        {\n            WebAudioUtils.setParamValue(band.gain, 0);\n        });\n    }\n\n    public destroy(): void\n    {\n        this.bands.forEach((band: BiquadFilterNode) =>\n        {\n            band.disconnect();\n        });\n        (this as any).bands = null;\n        (this as any).bandsMap = null;\n    }\n}\n\nexport { EqualizerFilter };\n","import { getInstance } from '../instance';\nimport { Filter } from './Filter';\n\n/**\n * Filter for adding adding delaynode.\n *\n * @memberof filters\n */\nclass DistortionFilter extends Filter\n{\n    /** The Wave shape node use to distort */\n    private _distortion: WaveShaperNode;\n\n    /** The amount of distoration */\n    private _amount: number;\n\n    /** @param amount - The amount of distoration from 0 to 1. */\n    constructor(amount = 0)\n    {\n        if (getInstance().useLegacy)\n        {\n            super(null);\n\n            return;\n        }\n\n        const { context } = getInstance();\n        const distortion: WaveShaperNode = context.audioContext.createWaveShaper();\n\n        super(distortion);\n\n        this._distortion = distortion;\n\n        this.amount = amount;\n    }\n\n    /** The amount of distortion to set. */\n    set amount(value: number)\n    {\n        this._amount = value;\n        const scaledValue = value * 1000;\n        const samples = 44100;\n        const curve: Float32Array = new Float32Array(samples);\n        const deg: number = Math.PI / 180;\n\n        let i = 0;\n        let x: number;\n\n        for (; i < samples; ++i)\n        {\n            x = (i * 2 / samples) - 1;\n            curve[i] = (3 + scaledValue) * x * 20 * deg / (Math.PI + (scaledValue * Math.abs(x)));\n        }\n        this._distortion.curve = curve;\n        this._distortion.oversample = '4x';\n    }\n    get amount(): number\n    {\n        return this._amount;\n    }\n\n    public destroy(): void\n    {\n        this._distortion = null;\n        super.destroy();\n    }\n}\n\nexport { DistortionFilter };\n","import { getInstance } from '../instance';\nimport { WebAudioUtils } from '../webaudio/WebAudioUtils';\nimport { Filter } from './Filter';\n\n/**\n * Filter for adding Stereo panning.\n *\n * @memberof filters\n */\nclass StereoFilter extends Filter\n{\n    /** The stereo panning node */\n    private _stereo: StereoPannerNode;\n\n    /** The stereo panning node */\n    private _panner: PannerNode;\n\n    /** The amount of panning, -1 is left, 1 is right, 0 is centered */\n    private _pan: number;\n\n    /** @param pan - The amount of panning, -1 is left, 1 is right, 0 is centered. */\n    constructor(pan = 0)\n    {\n        if (getInstance().useLegacy)\n        {\n            super(null);\n\n            return;\n        }\n\n        let stereo: StereoPannerNode;\n        let panner: PannerNode;\n        let destination: AudioNode;\n        const { audioContext } = getInstance().context;\n\n        if (audioContext.createStereoPanner)\n        {\n            stereo = audioContext.createStereoPanner();\n            destination = stereo;\n        }\n        else\n        {\n            panner = audioContext.createPanner();\n            panner.panningModel = 'equalpower';\n            destination = panner;\n        }\n\n        super(destination);\n\n        this._stereo = stereo;\n        this._panner = panner;\n\n        this.pan = pan;\n    }\n\n    /** Set the amount of panning, where -1 is left, 1 is right, and 0 is centered */\n    set pan(value: number)\n    {\n        this._pan = value;\n        if (this._stereo)\n        {\n            WebAudioUtils.setParamValue(this._stereo.pan, value);\n        }\n        else\n        {\n            this._panner.setPosition(value, 0, 1 - Math.abs(value));\n        }\n    }\n    get pan(): number\n    {\n        return this._pan;\n    }\n\n    public destroy(): void\n    {\n        super.destroy();\n        this._stereo = null;\n        this._panner = null;\n    }\n}\n\nexport { StereoFilter };\n","import { getInstance } from '../instance';\nimport { Filter } from './Filter';\n\n/**\n * Filter for adding reverb. Refactored from\n * https://github.com/web-audio-components/simple-reverb/\n *\n * @memberof filters\n */\nclass ReverbFilter extends Filter\n{\n    private _seconds: number;\n    private _decay: number;\n    private _reverse: boolean;\n\n    /**\n     * @param seconds - Seconds for reverb\n     * @param decay - The decay length\n     * @param reverse - Reverse reverb\n     */\n    constructor(seconds = 3, decay = 2, reverse = false)\n    {\n        if (getInstance().useLegacy)\n        {\n            super(null);\n\n            return;\n        }\n\n        super(null);\n\n        this._seconds = this._clamp(seconds, 1, 50);\n        this._decay = this._clamp(decay, 0, 100);\n        this._reverse = reverse;\n        this._rebuild();\n    }\n\n    /**\n     * Clamp a value\n     * @param value\n     * @param min - Minimum value\n     * @param max - Maximum value\n     * @return Clamped number\n     */\n    private _clamp(value: number, min: number, max: number): number\n    {\n        return Math.min(max, Math.max(min, value));\n    }\n\n    /**\n     * Length of reverb in seconds from 1 to 50\n     * @default 3\n     */\n    get seconds(): number\n    {\n        return this._seconds;\n    }\n    set seconds(seconds: number)\n    {\n        this._seconds = this._clamp(seconds, 1, 50);\n        this._rebuild();\n    }\n\n    /**\n     * Decay value from 0 to 100\n     * @default 2\n     */\n    get decay(): number\n    {\n        return this._decay;\n    }\n    set decay(decay: number)\n    {\n        this._decay = this._clamp(decay, 0, 100);\n        this._rebuild();\n    }\n\n    /**\n     * Reverse value from 0 to 1\n     * @default false\n     */\n    get reverse(): boolean\n    {\n        return this._reverse;\n    }\n    set reverse(reverse: boolean)\n    {\n        this._reverse = reverse;\n        this._rebuild();\n    }\n\n    /**\n     * Utility function for building an impulse response\n     * from the module parameters.\n     */\n    private _rebuild(): void\n    {\n        const context = getInstance().context.audioContext;\n        const rate: number = context.sampleRate;\n        const length: number = rate * this._seconds;\n        const impulse: AudioBuffer = context.createBuffer(2, length, rate);\n        const impulseL: Float32Array = impulse.getChannelData(0);\n        const impulseR: Float32Array = impulse.getChannelData(1);\n        let n: number;\n\n        for (let i = 0; i < length; i++)\n        {\n            n = this._reverse ? length - i : i;\n            impulseL[i] = ((Math.random() * 2) - 1) * Math.pow(1 - (n / length), this._decay);\n            impulseR[i] = ((Math.random() * 2) - 1) * Math.pow(1 - (n / length), this._decay);\n        }\n        const convolver = getInstance().context.audioContext.createConvolver();\n\n        convolver.buffer = impulse;\n        this.init(convolver);\n    }\n}\n\nexport { ReverbFilter };\n","import { getInstance } from '../instance';\nimport { Filter } from './Filter';\n\n/**\n * Combine all channels into mono channel.\n *\n * @memberof filters\n */\nclass MonoFilter extends Filter\n{\n    /** Merger node */\n    private _merger: ChannelMergerNode;\n\n    constructor()\n    {\n        if (getInstance().useLegacy)\n        {\n            super(null);\n\n            return;\n        }\n        const audioContext: AudioContext = getInstance().context.audioContext;\n        const splitter: ChannelSplitterNode = audioContext.createChannelSplitter();\n        const merger: ChannelMergerNode = audioContext.createChannelMerger();\n\n        merger.connect(splitter);\n        super(merger, splitter);\n        this._merger = merger;\n    }\n\n    public destroy(): void\n    {\n        this._merger.disconnect();\n        this._merger = null;\n        super.destroy();\n    }\n}\n\nexport { MonoFilter };\n","import { getInstance } from '../instance';\nimport { Filter } from './Filter';\n\n/**\n * Export a MediaStream to be recorded\n *\n * @memberof filters\n */\nclass StreamFilter extends Filter\n{\n    private _stream: MediaStream;\n\n    constructor()\n    {\n        if (getInstance().useLegacy)\n        {\n            super(null);\n\n            return;\n        }\n        const audioContext: AudioContext = getInstance().context.audioContext;\n        const destination: MediaStreamAudioDestinationNode = audioContext.createMediaStreamDestination();\n        const source: MediaStreamAudioSourceNode = audioContext.createMediaStreamSource(destination.stream);\n\n        super(destination, source);\n        this._stream = destination.stream;\n    }\n\n    public get stream(): MediaStream\n    {\n        return this._stream;\n    }\n\n    public destroy(): void\n    {\n        this._stream = null;\n        super.destroy();\n    }\n}\n\nexport { StreamFilter };\n","import { getInstance } from '../instance';\nimport { WebAudioUtils } from '../webaudio/WebAudioUtils';\nimport { Filter } from './Filter';\n\n/**\n * Creates a telephone-sound filter.\n *\n * @memberof filters\n */\nclass TelephoneFilter extends Filter\n{\n    constructor()\n    {\n        if (getInstance().useLegacy)\n        {\n            super(null);\n\n            return;\n        }\n\n        const { audioContext } = getInstance().context;\n        const lpf1 = audioContext.createBiquadFilter();\n        const lpf2 = audioContext.createBiquadFilter();\n        const hpf1 = audioContext.createBiquadFilter();\n        const hpf2 = audioContext.createBiquadFilter();\n\n        lpf1.type = 'lowpass';\n        WebAudioUtils.setParamValue(lpf1.frequency, 2000.0);\n\n        lpf2.type = 'lowpass';\n        WebAudioUtils.setParamValue(lpf2.frequency, 2000.0);\n\n        hpf1.type = 'highpass';\n        WebAudioUtils.setParamValue(hpf1.frequency, 500.0);\n\n        hpf2.type = 'highpass';\n        WebAudioUtils.setParamValue(hpf2.frequency, 500.0);\n\n        lpf1.connect(lpf2);\n        lpf2.connect(hpf1);\n        hpf1.connect(hpf2);\n\n        super(lpf1, hpf2);\n    }\n}\n\nexport { TelephoneFilter };\n","/**\n * Set of dynamic filters to be applied to Sound.\n * @example\n * import { Sound, filters } from '@pixi/sound';\n * const sound = Sound.from('file.mp3');\n * sound.filters = [\n *   new filters.StereoFilter(-1),\n *   new filters.ReverbFilter()\n * ];\n * @namespace filters\n */\nexport * from './Filter';\nexport * from './EqualizerFilter';\nexport * from './DistortionFilter';\nexport * from './StereoFilter';\nexport * from './ReverbFilter';\nexport * from './MonoFilter';\nexport * from './StreamFilter';\nexport * from './TelephoneFilter';\n","/**\n * Classes supporting non-WebAudio based browsers.\n * @namespace webaudio\n */\nexport * from './WebAudioMedia';\nexport * from './WebAudioInstance';\nexport * from './WebAudioNodes';\nexport * from './WebAudioContext';\nexport * from './WebAudioUtils';\n","import { getInstance } from '../instance';\n\n/**\n * Increment the alias for play once\n * @static\n * @default 0\n */\nlet PLAY_ID = 0;\n\n/**\n * Create a new \"Audio\" stream based on given audio path and project uri; returns the audio object.\n * @memberof utils\n * @param url - Full path of the file to play.\n * @param {Function} callback - Callback when complete.\n * @return New audio element alias.\n */\nfunction playOnce(url: string, callback?: (err?: Error) => void): string\n{\n    const alias = `alias${PLAY_ID++}`;\n\n    getInstance().add(alias, {\n        url,\n        preload: true,\n        autoPlay: true,\n        loaded: (err: Error) =>\n        {\n            if (err)\n            {\n                console.error(err);\n                getInstance().remove(alias);\n                if (callback)\n                {\n                    callback(err);\n                }\n            }\n        },\n        complete: () =>\n        {\n            getInstance().remove(alias);\n            if (callback)\n            {\n                callback(null);\n            }\n        },\n    });\n\n    return alias;\n}\n\nexport { playOnce, PLAY_ID };\n","/* eslint-disable indent */\n/* eslint-disable linebreak-style */\nimport { BaseTexture } from '@pixi/core';\nimport { Sound } from '../Sound';\nimport { WebAudioMedia } from '../webaudio/WebAudioMedia';\n\ninterface RenderOptions {\n  /**\n   * offset start of the render.\n   * @default 0\n   */\n  start?: number;\n  /**\n   * offset end of the render.\n   * @default 0;\n\n   */\n  end?: number;\n  /**\n   * Width of the render.\n   * @default 512\n   */\n  width?: number;\n  /**\n   * Height of the render.\n   * @default 128\n   */\n  height?: number;\n  /**\n   * Fill style for waveform.\n   * @default 'black'\n   */\n  fill?: string | CanvasPattern | CanvasGradient;\n}\n\n/**\n * Render image as Texture. **Only supported with WebAudio**\n * @memberof utils\n * @param sound - Instance of sound to render\n * @param options - Custom rendering options\n * @return Result texture\n */\nfunction render(sound: Sound, options?: RenderOptions): BaseTexture {\n  const canvas: HTMLCanvasElement = document.createElement('canvas');\n\n  options = {\n    start: 0,\n    end: 0,\n    width: 512,\n    height: 128,\n    fill: 'black',\n    ...(options || {}),\n  };\n  if (options.start < 0 || options.start > options.width) options.start = 0;\n  if (options.start > options.width) options.start = options.width;\n  if (options.end === 0 || options.end > options.width) options.end = options.width;\n  canvas.width = options.end - options.start;\n  canvas.height = options.height;\n\n  const baseTexture = BaseTexture.from(canvas);\n\n  if (!(sound.media instanceof WebAudioMedia)) {\n    return baseTexture;\n  }\n\n  const media: WebAudioMedia = sound.media as WebAudioMedia;\n\n  // eslint-disable-next-line no-console\n  console.assert(!!media.buffer, 'No buffer found, load first');\n\n  const context: CanvasRenderingContext2D = canvas.getContext('2d');\n\n  context.fillStyle = options.fill;\n  const data: Float32Array = media.buffer.getChannelData(0);\n  const step: number = Math.ceil(data.length / options.width);\n  const amp: number = options.height / 2;\n\n  for (let i = options.start; i < options.end; i++) {\n    let min = 1.0;\n    let max = -1.0;\n\n    for (let j = 0; j < step; j++) {\n      const datum: number = data[i * step + j];\n\n      if (datum < min) {\n        min = datum;\n      }\n      if (datum > max) {\n        max = datum;\n      }\n    }\n    context.fillRect(i - options.start, options.height, 1, Math.max(-options.height, min * amp * 3));\n    //i++;\n  }\n\n  return baseTexture;\n}\n\nexport type { RenderOptions };\nexport { render };\n","import { Sound } from '../Sound';\nimport { WebAudioMedia } from '../webaudio/WebAudioMedia';\nimport { WebAudioContext } from '../webaudio/WebAudioContext';\n\n/**\n * Create a new sound for a sine wave-based tone.  **Only supported with WebAudio**\n * @memberof utils\n * @param hertz - Frequency of sound.\n * @param seconds - Duration of sound in seconds.\n * @return New sound.\n */\nfunction sineTone(hertz = 200, seconds = 1): Sound\n{\n    const sound = Sound.from({\n        singleInstance: true,\n    });\n\n    if (!(sound.media instanceof WebAudioMedia))\n    {\n        return sound;\n    }\n\n    const media = sound.media as WebAudioMedia;\n    const context = sound.context as WebAudioContext;\n\n    // set default value\n    const nChannels = 1;\n    const sampleRate = 48000;\n    const amplitude = 2;\n\n    // create the buffer\n    const buffer = context.audioContext.createBuffer(\n        nChannels,\n        seconds * sampleRate,\n        sampleRate,\n    );\n    const fArray = buffer.getChannelData(0);\n\n    // fill the buffer\n    for (let i = 0; i < fArray.length; i++)\n    {\n        const time  = i / buffer.sampleRate;\n        const angle = hertz * time * Math.PI;\n\n        fArray[i] = Math.sin(angle) * amplitude;\n    }\n\n    // set the buffer\n    media.buffer = buffer;\n    sound.isLoaded = true;\n\n    return sound;\n}\n\nexport { sineTone };\n","/**\n * Utilities that work with sounds.\n * @namespace utils\n */\nexport * from './playOnce';\nexport * from './render';\nexport * from './resolveUrl';\nexport * from './sineTone';\nexport * from './supported';\n","import { Loader } from '@pixi/loaders';\nimport * as core from '@pixi/core';\nimport { setInstance } from './instance';\nimport { SoundLoader } from './SoundLoader';\nimport { SoundLibrary } from './SoundLibrary';\nimport * as htmlaudio from './htmlaudio';\nimport * as filters from './filters';\nimport * as webaudio from './webaudio';\nimport * as utils from './utils';\n\nconst sound = setInstance(new SoundLibrary());\n\n// Add the loader plugin\nif ('extensions' in core)\n{\n    // Use the new extensions API\n    core.extensions.add(SoundLoader);\n}\nelse\n{\n    // fallback to the old API\n    Loader.registerPlugin(SoundLoader);\n}\n\nexport * from './Sound';\nexport * from './SoundLoader';\nexport * from './SoundLibrary';\nexport * from './Filterable';\nexport * from './interfaces';\nexport * from './filters/Filter';\nexport * from './SoundSprite';\nexport {\n    sound,\n    htmlaudio,\n    filters,\n    webaudio,\n    utils,\n};\n"],"names":["LoaderResource","id","Ticker","EventEmitter","BaseTexture","core","Loader"],"mappings":"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"}